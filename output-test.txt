#INFO: **** input file is /Users/jaydenl/Dev/ASDRP/QCHEM/PySCF-UI/stream.py ****
import streamlit as st
import streamlit.components.v1 as components
from pyscf import gto, scf
from streamlit.runtime.scriptrunner import add_script_run_ctx
import threading
import time
from stmol import *
import py3Dmol
from rdkit import Chem
from rdkit.Chem import rdDetermineBonds
from rdkit.Chem.rdmolfiles import MolFromXYZFile
from rdkit.Chem import Descriptors, Draw, AllChem
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from collections import defaultdict
import altair as alt
import os
from pyscf.hessian import thermo
from streamlit_extras.row import row
from utils import getAtomicToMoleculeName
# R^2
from sklearn.metrics import r2_score
import requests

api_url = "http://0.0.0.0:8000/calculate"
moleculeNames = getAtomicToMoleculeName()
trend_threshold = 0.95

if 'queue' not in st.session_state:
    st.session_state['queue'] = []
if 'results' not in st.session_state:
    st.session_state['results'] = []
if 'computing' not in st.session_state:
    st.session_state['computing'] = False

# get all files in directory names precomputed_molecules:
precomputed_molecules = list(map(lambda x: x.split(
    ".")[0], os.listdir("precomputed_molecules")))


def compute_pyscf(atom, basis_option, verbose_option, temperature, pressure):
    # print(atom)
    # print(basis_option)
    # print(verbose_option)
    mol = gto.Mole()
    mol.atom = atom
    mol.basis = basis_option
    # mol.verbose = verbose_option
    mol.verbose = int(verbose_option[0])
    mol.output = 'output-test.txt'
    mol.build()

    # mf = scf.RHF(mol)
    # mf.kernel()
    mf =mol.UHF().run()
    hessian = mf.Hessian().kernel()
    harmanalysis = thermo.harmonic_analysis(mf.mol, hessian)
    thermo_info =  thermo.thermo(mf, harmanalysis['freq_au'], temperature, pressure)
    
    outputFile = open("output-test.txt", "r")
    # Extract energy and time information
    time = None
    hessian_time = None
    energy = None
    for line in outputFile.readlines():
        if line.startswith("    CPU time for SCF"):
            time = float(line.split(" ")[-2])

        elif line.startswith("converged SCF energy = "):
            energy = float([i for i in line.split() if i != ''][4])
        elif line.startswith("    CPU time for UHF hessian"):
            hessian_time = float(line.split(" ")[-2])
    
    #Helmholtz Free Energy
    F_elec = (thermo_info['E_elec'][0] - temperature * thermo_info['S_elec' ][0], 'Eh')
    F_trans = (thermo_info['E_trans'][0] - temperature * thermo_info['S_trans'][0], 'Eh')
    F_rot = (thermo_info['E_rot'][0] - temperature * thermo_info['S_rot'][0], 'Eh')
    F_vib = (thermo_info['E_vib'][0] - temperature * thermo_info['S_vib'][0], 'Eh')
    F_tot = (F_elec[0] + F_trans[0] + F_rot[0] + F_vib[0], 'Eh') 
    
    #Massieu Potential/Helmholtz Free Entropy
    Φ_elec = (F_elec[0]/(-1*temperature), 'Eh/K')
    Φ_trans = (F_trans[0]/(-1*temperature), 'Eh/K')
    Φ_rot = (F_rot[0]/(-1*temperature), 'Eh/K')
    Φ_vib = (F_vib[0]/(-1*temperature), 'Eh/K')
    Φ_tot = (F_tot[0]/(-1*temperature), 'Eh/K')    
    
    #Planck Potential/Gibbs Free Entropy
    Ξ_elec = (thermo_info['G_elec'][0]/(-1*temperature), 'Eh/K')
    Ξ_trans = (thermo_info['G_trans'][0]/(-1*temperature), 'Eh/K')
    Ξ_rot = (thermo_info['G_rot'][0]/(-1*temperature), 'Eh/K')
    Ξ_vib = (thermo_info['G_vib'][0]/(-1*temperature), 'Eh/K')
    Ξ_tot = (thermo_info['G_tot'][0]/(-1*temperature), 'Eh/K')   
    
    data = {
        # 'energy': energy,
        'Runtime': time,
        'Hessian Runtime': hessian_time,
        'Converged SCF-HF Nuclear Energy (Ha)': mf.energy_nuc(),
        'Converged SCF-HF Electronic Energy (Ha)': mf.energy_elec(),
        'Converged SCF-HF Total Energy (Ha)': mf.energy_tot(),
        # thermodynamic data
        # Heat Capacity
        'Constant Volume Heat Capacity (Ha/K)': thermo_info['Cv_tot'][0],
        'Constant Pressure Heat Capacity (Ha/K)': thermo_info['Cp_tot'][0],
        'Zero-Point Energy (Ha)': thermo_info['ZPE'][0],
        '0K Internal Energy (Ha)': thermo_info['E_0K'][0],
        'Internal Energy (at given T) (Ha)': thermo_info['E_tot'][0],
            'Electronic Internal Energy (Ha)': thermo_info['E_elec'][0],
            'Vibrational Internal Energy (Ha)': thermo_info['E_vib'][0],
            'Translational Internal Energy (Ha)': thermo_info['E_trans'][0],
            'Rotational Internal Energy (Ha)': thermo_info['E_rot'][0],
        # enthalpy
        'Enthalpy (Ha)': thermo_info['H_tot'][0],
            'Electronic Enthalpy (Ha)': thermo_info['H_elec'][0],
            'Vibrational Enthalpy (Ha)': thermo_info['H_vib'][0],
            'Translational Enthalpy (Ha)': thermo_info['H_trans'][0],
            'Rotational Enthalpy (Ha)': thermo_info['H_rot'][0],
        # gibbs free energy
        'Gibbs Free Energy (Ha)': thermo_info['G_tot'][0],
            'Electronic Gibbs Free Energy (Ha)': thermo_info['G_elec'][0],
            'Vibrational Gibbs Free Energy (Ha)': thermo_info['G_vib'][0],
            'Translational Gibbs Free Energy (Ha)': thermo_info['G_trans'][0],
            'Rotational Gibbs Free Energy (Ha)': thermo_info['G_rot'][0],
        # Helmholtz free energy
        'Helmholtz Free Energy (Ha)': F_tot[0],
            'Electronic Helmholtz Free Energy (Ha)': F_elec[0],
            'Vibrational Helmholtz Free Energy (Ha)': F_vib[0],
            'Translational Helmholtz Free Energy (Ha)': F_trans[0],
            'Rotational Helmholtz Free Energy (Ha)': F_rot[0],
        # Entropy
        'Entropy (Ha/K)': thermo_info['S_tot'][0],
            'Electronic Entropy (Ha/K)': thermo_info['S_elec'][0],
            'Vibrational Entropy (Ha/K)': thermo_info['S_vib'][0],
            'Translational Entropy (Ha/K)': thermo_info['S_trans'][0],
            'Rotational Entropy (Ha/K)': thermo_info['S_rot'][0],
        # Massieu Potential/Helmholtz Free Entropy
        'Massieu Potential/Helmholtz Free Potential (Ha/K)': Φ_tot[0],
            'Electronic Massieu Potential/Helmholtz Free Potential (Ha/K)': Φ_elec[0],
            'Vibrational Massieu Potential/Helmholtz Free Potential (Ha/K)': Φ_vib[0],
            'Translational Massieu Potential/Helmholtz Free Potential (Ha/K)': Φ_trans[0],
            'Rotational Massieu Potential/Helmholtz Free Potential (Ha/K)': Φ_rot[0],
        # Planck Potential/Gibbs Free Entropy
        'Planck Potential/Gibbs Free Potential (Ha/K)': Ξ_tot[0],
            'Electronic Planck Potential/Gibbs Free Potential (Ha/K)': Ξ_elec[0],
            'Vibrational Planck Potential/Gibbs Free Potential (Ha/K)': Ξ_vib[0],
            'Translational Planck Potential/Gibbs Free Potential (Ha/K)': Ξ_trans[0],
            'Rotational Planck Potential/Gibbs Free Potential (Ha/K)': Ξ_rot[0],
    }

    return data


def getMoleculeName(atom):
    d = {}
    for line in atom.split("\n"):
        try:
            name = line.split()[0]
            if name in d:
                d[name] += 1
            else:
                d[name] = 1
        except:
            pass
    name = ""
    for key in d:
        name += key + str(d[key])
    return name


# Streamlit layout
st.title("PySCF")

# Function to process the uploaded text file


def process_text_file(uploaded_file):
    if uploaded_file is not None:
        # Read the contents of the file
        text_contents = uploaded_file.getvalue().decode("utf-8")
        return text_contents
    else:
        return None


def addToQueue(atom, basis):
    st.session_state['queue'].append((atom, basis))


tabDatabase, tabTextInput, tabFileInput = st.tabs(
    ["Database", "Text Input", "File Input"])

basis_option = st.selectbox(
    "Basis", ["cc-pVTZ", "cc-pVDZ", "cc-pVQZ", "cc-pV5Z", "sto-3g"])
verbose_option = st.selectbox("Verbose", index=2, options=[
                              "3, energy only", "4, cycles and energy", "5, cycles energy and runtime", "9, max"])
# verbose_option = st.slider("Verbose", min_value=0, max_value=9, value=2)

#Second Input (NEW) - Pressure of the system
# pressure = 101325 #in Pascals (Pa), 101325 Pa = 1 atm
#Third Input (NEW) - Temperature of the system
# temperature = 298.15 #in K, 298.15K = room temperature (25 degrees Celsius) 
thermo_row = row(2)
temp = thermo_row.number_input("Temperature (K)", min_value=0.0, value=298.15)
press = thermo_row.number_input("Pressure (Pa)", min_value=0.0, value=101325.0)

with tabDatabase:
    selectedMolecule = st.selectbox(
        'Search Molecule Database', precomputed_molecules)
    if st.button('Add to Queue', use_container_width=True, key="db"):
        if selectedMolecule:
            parseDatafile = open(
                "precomputed_molecules/" + selectedMolecule + ".geom.txt", "r").readlines()[4:]
            parseDatafile = "\n".join(parseDatafile[:-1])
            addToQueue(parseDatafile, basis_option)
        else:
            st.warning(
                "Please select a molecule using dropdown menu or inputting a text file.")

with tabTextInput:
    # Create a Streamlit button which gives example
    with st.expander("See Example Input"):
        st.write("C 0.0000000 0.0000000 0.0000000")
        st.write("H 0.6311940 0.6311940 0.6311940")
        st.write("H -0.6311940 -0.6311940 0.6311940")
        st.write("H -0.6311940 0.6311940 -0.6311940")
        st.write("H 0.6311940 -0.6311940 -0.631194")
    # Fills xyz_input text area to the contents of the uploaded file
    xyz_input = st.text_area("XYZ Input", key="textxyz")

    if st.button('Add to Queue', use_container_width=True, key="text"):
        if xyz_input:
            addToQueue(xyz_input, basis_option)
        else:
            st.warning(
                "Please provide an XYZ input using the text box or inputting a text file.")

with tabFileInput:
    # Create a Streamlit button which gives example
    with st.expander("See Example Input"):
        st.write("C 0.0000000 0.0000000 0.0000000")
        st.write("H 0.6311940 0.6311940 0.6311940")
        st.write("H -0.6311940 -0.6311940 0.6311940")
        st.write("H -0.6311940 0.6311940 -0.6311940")
        st.write("H 0.6311940 -0.6311940 -0.631194")
    # Display file uploader for a single text file and processes it
    uploaded_file = st.file_uploader("Upload a XYZ input", type=["txt"])
    text_contents = process_text_file(uploaded_file)
    xyz_input = st.text_area(
        "XYZ Input", value=text_contents, key="filexyz") if text_contents else None
    if st.button('Add to Queue', use_container_width=True, key="filequeue"):
        if text_contents:
            addToQueue(text_contents, basis_option)
        else:
            st.warning(
                "Please provide an XYZ input using file uploader")

col1, col2, col3, col4 = st.columns(4, gap="small")

# if col1.button("Add to Queue"):
#     if xyz_input:
#         addToQueue(xyz_input)
#     else:
#         st.warning(
#             "Please provide an XYZ input using the text box or inputting a text file.")

# Computes only if something is added to the queue; grayed out otherwise
compute_disabled = len(st.session_state['queue']) == 0
if st.button("Compute", disabled=compute_disabled, type="primary", use_container_width=True) or st.session_state['computing'] == True:
    if len(st.session_state['queue']) > 0:
        with st.spinner("Computing " + getMoleculeName(st.session_state['queue'][0][0]) + "..."):
            st.session_state['computing'] = True
            atom = st.session_state['queue'][0][0]
            basis = st.session_state['queue'][0][1]
            st.session_state['queue'].pop(0)
            # st.write("Computing...")
            # progress_text = "Computing..."
            # my_bar = st.progress(0, text=progress_text)

            # for percent_complete in range(100):
            #     time.sleep(0.01)
            #     my_bar.progress(percent_complete + 1, text=progress_text)
            # time.sleep(1)
            # my_bar.empty()

            # Delete empty lines
            parsed = [line for line in atom.splitlines() if line.strip() != ""]
            xyz = "\n".join(parsed)
            mol = f"{len(parsed)}\nname\n{str(xyz)}"

            # output xyz into molecule.xyz file
            with open('molecule.xyz', 'w') as f:
                f.write(f"{len(parsed)}\nhi\n{str(xyz)}")

            raw_mol = MolFromXYZFile('molecule.xyz')
            rdkit_mol = Chem.Mol(raw_mol)
            rdDetermineBonds.DetermineBonds(rdkit_mol, charge=0)
            tmpmol = Chem.AddHs(rdkit_mol)
            AllChem.EmbedMolecule(tmpmol)
            smiles = Chem.MolToSmiles(tmpmol)

            data = compute_pyscf(
                atom, basis, verbose_option, temp, press)
            
            # tdict = {"atom": atom, "basis_option": basis, "verbose_option": verbose_option, "temperature": temp, "pressure": press}
            # response = requests.post(api_url, params=tdict)
            
            # if response.status_code == 200:
            #     data = response.json()
            #     print("Yay, it worked!")
            # else:
            #     print(f"Error: {response.status_code} - {response.text}")   
            data['Atoms'] = rdkit_mol.GetNumAtoms()
            data['Bonds'] = rdkit_mol.GetNumBonds()
            data['Rings'] = rdkit_mol.GetRingInfo().NumRings()
            data['Weight'] = Descriptors.MolWt(rdkit_mol)
            data['Molecule'] = mol
            data['Rdkit Molecule'] = rdkit_mol
            data['Basis'] = basis
            data['Molecule Name'] = getMoleculeName(atom)
            data['Smiles'] = smiles
            
            st.session_state['results'].append(data)
            st.rerun()
            
    elif st.session_state['computing'] == True:
        st.session_state['computing'] = False
    else:
        st.warning("Please add an XYZ input to the queue.")

if 'queue' in st.session_state:
    st.subheader("Queue")
    for queue_item in st.session_state['queue']:
        st.write(f"{getMoleculeName(queue_item[0])} | {queue_item[1]}")


tab1, tab2, tab3 = st.tabs(['Results', 'View Graphs', 'View Logs'])

with tab1:
    if 'results' in st.session_state:
        st.subheader("Results")
        for result_item in st.session_state['results']:
            data = result_item
            energy = {
                'Internal Energy (E - Ha)':[data['Internal Energy (at given T) (Ha)'],data['Electronic Internal Energy (Ha)'],data['Vibrational Internal Energy (Ha)'],data['Translational Internal Energy (Ha)'],data['Rotational Internal Energy (Ha)']],
                'Helmholtz Free Energy (F - Ha)':[data['Helmholtz Free Energy (Ha)'],data['Electronic Helmholtz Free Energy (Ha)'],data['Vibrational Helmholtz Free Energy (Ha)'],data['Translational Helmholtz Free Energy (Ha)'],data['Rotational Helmholtz Free Energy (Ha)']],
                'Gibbs Free Energy (G - Ha)':[data['Gibbs Free Energy (Ha)'],data['Electronic Gibbs Free Energy (Ha)'],data['Vibrational Gibbs Free Energy (Ha)'],data['Translational Gibbs Free Energy (Ha)'],data['Rotational Gibbs Free Energy (Ha)']],
                'Enthalpy (H - Ha)':[data['Enthalpy (Ha)'],data['Electronic Enthalpy (Ha)'],data['Vibrational Enthalpy (Ha)'],data['Translational Enthalpy (Ha)'],data['Rotational Enthalpy (Ha)']],  
            }
            pd.set_option("display.precision", 16)
            enerdf = pd.DataFrame(energy, index = ["Total","Electronic","Vibrational","Translational","Rotational"])
            
            entropy = {
                'Entropy (S - Ha/K)':[data['Entropy (Ha/K)'],data['Electronic Entropy (Ha/K)'],data['Vibrational Entropy (Ha/K)'],data['Translational Entropy (Ha/K)'],data['Rotational Entropy (Ha/K)']],
                'Helmholtz Free Entropy (Φ - Ha/K)':[data['Massieu Potential/Helmholtz Free Potential (Ha/K)'],data['Electronic Massieu Potential/Helmholtz Free Potential (Ha/K)'],data['Vibrational Massieu Potential/Helmholtz Free Potential (Ha/K)'],data['Translational Massieu Potential/Helmholtz Free Potential (Ha/K)'],data['Rotational Massieu Potential/Helmholtz Free Potential (Ha/K)']],
                'Gibbs Free Entropy (Ξ - Ha/K)':[data['Planck Potential/Gibbs Free Potential (Ha/K)'],data['Electronic Planck Potential/Gibbs Free Potential (Ha/K)'],data['Vibrational Planck Potential/Gibbs Free Potential (Ha/K)'],data['Translational Planck Potential/Gibbs Free Potential (Ha/K)'],data['Rotational Planck Potential/Gibbs Free Potential (Ha/K)']],
            }
            
            excluded_keys = ['Internal Energy (at given T) (Ha)', 'Electronic Internal Energy (Ha)', 'Vibrational Internal Energy (Ha)', 'Translational Internal Energy (Ha)', 'Rotational Internal Energy (Ha)', 'Helmholtz Free Energy (Ha)', 'Electronic Helmholtz Free Energy (Ha)', 'Vibrational Helmholtz Free Energy (Ha)', 'Translational Helmholtz Free Energy (Ha)', 'Rotational Helmholtz Free Energy (Ha)', 'Gibbs Free Energy (Ha)', 'Electronic Gibbs Free Energy (Ha)', 'Vibrational Gibbs Free Energy (Ha)', 'Translational Gibbs Free Energy (Ha)', 'Rotational Gibbs Free Energy (Ha)', 'Enthalpy (Ha)', 'Electronic Enthalpy (Ha)', 'Vibrational Enthalpy (Ha)', 'Translational Enthalpy (Ha)', 'Rotational Enthalpy (Ha)', 'Entropy (Ha/K)', 'Electronic Entropy (Ha/K)', 'Vibrational Entropy (Ha/K)', 'Translational Entropy (Ha/K)', 'Rotational Entropy (Ha/K)', 'Massieu Potential/Helmholtz Free Potential (Ha/K)', 'Electronic Massieu Potential/Helmholtz Free Potential (Ha/K)', 'Vibrational Massieu Potential/Helmholtz Free Potential (Ha/K)', 'Translational Massieu Potential/Helmholtz Free Potential (Ha/K)', 'Rotational Massieu Potential/Helmholtz Free Potential (Ha/K)', 'Planck Potential/Gibbs Free Potential (Ha/K)', 'Electronic Planck Potential/Gibbs Free Potential (Ha/K)', 'Vibrational Planck Potential/Gibbs Free Potential (Ha/K)', 'Translational Planck Potential/Gibbs Free Potential (Ha/K)', 'Rotational Planck Potential/Gibbs Free Potential (Ha/K)'] + ['Molecule', 'Rdkit Molecule', 'Basis', 'Molecule Name', 'Atoms', 'Bonds', 'Rings', 'Weight', 'Runtime', 'Hessian Runtime']
            
            pd.set_option("display.precision", 16)
            entrodf = pd.DataFrame(entropy, index = ["Total","Electronic","Vibrational","Translational","Rotational"])
            
            with st.container():
                result_col_1, result_col_2 = st.columns([2, 1])
                result_col_1.write(
                    f"{data['Molecule Name']} | {data['Basis']} | Runtime: {data['Runtime']} seconds | Hessian Runtime: {data['Hessian Runtime']} seconds")
                result_col_1.write(
                    f"\# of Atoms: {data['Atoms']} | \# of Bonds: {data['Bonds']} | \# of Rings:  {data['Rings']}")
                result_col_1.write(
                    f"Molecular Weight: {data['Weight']}")
                # energy data
                for key, value in data.items():
                    if key not in excluded_keys:
                        result_col_1.write(f"{key}: {value}")

                with result_col_2:
                    speck_plot(
                        data['Molecule'], component_h=200, component_w=200, wbox_height="auto", wbox_width="auto")
                    st.image(Draw.MolToImage(data['Rdkit Molecule'], size=(200, 200)))
                    st.image(Draw.MolToImage(Chem.MolFromSmiles(data['Smiles']), size=(200, 200)))
                # linebreak
                st.write("")
                st.write("")
                st.table(data=enerdf)
                st.table(data=entrodf)
                

with tab2:
    # st.subheader("Comparative Graphs (WIP)")
    
    def count_atoms(molecule):
    # Check that there is a valid molecule
        if molecule:

            # Add hydrogen atoms--RDKit excludes them by default
            molecule_with_Hs = Chem.AddHs(molecule)
            comp = defaultdict(lambda: 0)

            # Get atom counts
            for atom in molecule_with_Hs.GetAtoms():
                comp[atom.GetAtomicNum()] += 1

            # # If charged, add charge as "atomic number" 0
            # charge = GetFormalCharge(molecule_with_Hs)
            # if charge != 0:
            #     comp[0] = charge
            return comp

    if 'results' in st.session_state and len(st.session_state['results']) > 1:
        st.subheader("Comparative Graphs")

        independent = [
            'Atoms',
            'Bonds',
            # 'Rings',
            'Weight',
        ]
        
        exclude = [
            'Basis',
            'Rings',
            'Rdkit Molecule',
            'Converged SCF-HF Electronic Energy (Ha)',
            'Molecule',
            'Molecule Name',
            'Smiles',
        ]
        
        dependent = [i for i in st.session_state['results'][0].keys() if i not in independent]
        dependent = [i for i in dependent if i not in exclude]
        # print(dependent)
        
        df_columns = list(st.session_state['results'][0].keys())
        df_columns.remove('Rdkit Molecule')
        
        df = pd.DataFrame(st.session_state['results'], columns=df_columns)
        
        
        for label in independent:
            for target in dependent:
                # print(label, target)
                # print(df[label].values, df[target].values)
                # Linear Regression
                coeffs_linear = np.polyfit(
                    df[label].values, df[target].values, 1)
                poly1d_fn_linear = np.poly1d(coeffs_linear)
                x = np.linspace(min(df[label]), max(df[label]), 100)

                # Quadratic Regression
                coeffs_quad = np.polyfit(
                    df[label].values, df[target].values, 2)
                poly1d_fn_quad = np.poly1d(coeffs_quad)
                
                # calculate R^2
                r2_linear = r2_score(df[target], poly1d_fn_linear(df[label]))
                r2_quad = r2_score(df[target], poly1d_fn_quad(df[label]))
                
                if r2_linear >= trend_threshold or r2_quad >= trend_threshold:
                    st.markdown(f'### Number of {label} vs. {target}')
                    # Display Equations
                    st.markdown(
                        f"<span style='color: red;'>Best Fit Linear Equation ({target}): Y = {coeffs_linear[0]:.4f}x + {coeffs_linear[1]:.4f} (R^2 = {r2_linear:.4f})</span>", unsafe_allow_html=True)
                    st.markdown(
                        f"<span style='color: green;'>Best Fit Quadratic Equation ({target}): Y = {coeffs_quad[0]:.4f}x² + {coeffs_quad[1]:.4f}x + {coeffs_quad[2]:.4f} (R^2 = {r2_quad:.4f})</span>", unsafe_allow_html=True)

                    # Create a DataFrame for the regression lines
                    df_line = pd.DataFrame(
                        {label: x, 'Linear': poly1d_fn_linear(x), 'Quadratic': poly1d_fn_quad(x)})

                    # Plot
                    scatter = alt.Chart(df).mark_circle(size=60).encode(
                        x=label,
                        y=target,
                        tooltip=[label, target]
                    )

                    line_linear = alt.Chart(df_line).mark_line(color='red').encode(
                        x=label,
                        y='Linear'
                    )

                    line_quad = alt.Chart(df_line).mark_line(color='green').encode(
                        x=label,
                        y='Quadratic'
                    )

                    # Display the plot
                    st.altair_chart(scatter + line_linear +
                                    line_quad, use_container_width=True)
        
        
        # for atomic_num, count in count_atoms(st.session_state['results'][0]['rdkit_mol']).items():
        
        # atom_counts = [count_atoms(result_item['rdkit_mol'])
        #                for result_item in st.session_state['results']]

        # # Prepare datasets
        # num_atoms = [result_item['atoms']
        #              for result_item in st.session_state['results']]
        # num_bonds = [result_item['bonds'].GetNumBonds()
        #              for result_item in st.session_state['results']]
        # num_conformers = [result_item[4].GetNumConformers()
        #                   for result_item in st.session_state['results']]
        # # 6 and 1 are atomic code
        # num_carbons = [atom_counts[i][6] for i in range(len(atom_counts))]
        # num_hydrogens = [atom_counts[i][1] for i in range(len(atom_counts))]

        # energies = [result_item[1]
        #             for result_item in st.session_state['results']]
        # runtimes = [result_item[2]
        #             for result_item in st.session_state['results']]

        # df_atoms = pd.DataFrame(
        #     {'Atoms': num_atoms, 'Energy': energies, 'Runtime': runtimes})
        # df_bonds = pd.DataFrame(
        #     {'Bonds': num_bonds, 'Energy': energies, 'Runtime': runtimes})
        # df_conformers = pd.DataFrame(
        #     {'Conformers': num_conformers, 'Energy': energies, 'Runtime': runtimes})
        # df_carbons = pd.DataFrame(
        #     {'Carbons': num_carbons, 'Energy': energies, 'Runtime': runtimes})
        # df_hydrogens = pd.DataFrame(
        #     {'Hydrogens': num_hydrogens, 'Energy': energies, 'Runtime': runtimes})

        # Generate Graphs
        # for df, label in zip([df_atoms, df_bonds, df_carbons, df_hydrogens], ['Atoms', 'Bonds', 'Carbons', 'Hydrogens']):
        #     for target in ['Energy', 'Runtime']:
        #         st.markdown(f'### Number of {label} vs. {target}')

        #         # Linear Regression
        #         coeffs_linear = np.polyfit(
        #             df[label].values, df[target].values, 1)
        #         poly1d_fn_linear = np.poly1d(coeffs_linear)
        #         x = np.linspace(min(df[label]), max(df[label]), 100)

        #         # Quadratic Regression
        #         coeffs_quad = np.polyfit(
        #             df[label].values, df[target].values, 2)
        #         poly1d_fn_quad = np.poly1d(coeffs_quad)

        #         # Display Equations
        #         st.markdown(
        #             f"<span style='color: red;'>Best Fit Linear Equation ({target}): Y = {coeffs_linear[0]:.4f}x + {coeffs_linear[1]:.4f}</span>", unsafe_allow_html=True)
        #         st.markdown(
        #             f"<span style='color: green;'>Best Fit Quadratic Equation ({target}): Y = {coeffs_quad[0]:.4f}x² + {coeffs_quad[1]:.4f}x + {coeffs_quad[2]:.4f}</span>", unsafe_allow_html=True)

        #         # Create a DataFrame for the regression lines
        #         df_line = pd.DataFrame(
        #             {label: x, 'Linear': poly1d_fn_linear(x), 'Quadratic': poly1d_fn_quad(x)})

        #         # Plot
        #         scatter = alt.Chart(df).mark_circle(size=60).encode(
        #             x=label,
        #             y=target,
        #             tooltip=[label, target]
        #         )

        #         line_linear = alt.Chart(df_line).mark_line(color='red').encode(
        #             x=label,
        #             y='Linear'
        #         )

        #         line_quad = alt.Chart(df_line).mark_line(color='green').encode(
        #             x=label,
        #             y='Quadratic'
        #         )

        #         # Display the plot
        #         st.altair_chart(scatter + line_linear +
        #                         line_quad, use_container_width=True)

        #     # Display Equation
        #     # st.write(f"Best Fit Equation ({target}): Y = {coeffs[0]:.4f}x + {coeffs[1]:.4f}")

with tab3:
    with open('output-test.txt', 'r') as file:
        log_data = file.read()
        st.markdown(f'```\n{log_data}\n```')


# xyzview = py3Dmol.view(query='pdb:1A2C')
# xyzview.setStyle({'cartoon':{'color':'spectrum'}})
# showmol(xyzview, height = 500,width=800)

# def draw_with_spheres(mol):
#     v = py3Dmol.view(width=300,height=300)
#     IPythonConsole.addMolToView(mol,v)
#     v.zoomTo()
#     v.setStyle({'sphere':{'radius':0.3},'stick':{'radius':0.2}});
#     v.show()


# Attempt at creating an async queue, need to find a way to detect browser closing to stop the queue

# def runQueue():
#     for i in range(1, 10):
#         time.sleep(1)
#         print("test", str(i))


# if 'queue-running' not in st.session_state:
#     st.session_state['queue-running'] = True
#     t = threading.Thread(target=runQueue)
#     add_script_run_ctx(t)
#     t.start()

# components.html("""<html>
# <script>
#     const origClose = window.close;
#     window.close = () => {
#         console.log("asdf");
#         // origClose();
#     }
#     document.addEventListener("beforeunload", () => {
#                 alert(1);
#                 console.log(a.a.a.a);
#     })
# </script>
# <div style="color: white" onclick="">
#                 hihihihi
# </div>
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Jaydens-MacBook.local', release='23.0.0', version='Darwin Kernel Version 23.0.0: Fri Sep 15 14:41:34 PDT 2023; root:xnu-10002.1.13~1/RELEASE_ARM64_T8103', machine='arm64', processor='arm')  Threads 1
Python 3.8.18 | packaged by conda-forge | (default, Oct 10 2023, 15:46:56) 
[Clang 16.0.6 ]
numpy 1.24.4  scipy 1.10.1
Date: Sun Jun 16 14:32:42 2024
PySCF version 2.4.0
PySCF path  /Users/jaydenl/anaconda3/envs/pyscfui/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 7
[INPUT] num. electrons = 22
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 C      0.000000000000   0.000000000000  -1.237688000000 AA    0.000000000000   0.000000000000  -2.338891347661 Bohr   0.0
[INPUT]  2 C      0.000000000000   0.000000000000   0.226736000000 AA    0.000000000000   0.000000000000   0.428468942579 Bohr   0.0
[INPUT]  3 C      0.000000000000   0.000000000000   1.408597000000 AA    0.000000000000   0.000000000000   2.661862549884 Bohr   0.0
[INPUT]  4 H      0.000000000000   0.000000000000   2.461864000000 AA    0.000000000000   0.000000000000   4.652248715926 Bohr   0.0
[INPUT]  5 H      0.000000000000   1.013856000000  -1.615912000000 AA    0.000000000000   1.915910169747  -3.053631121398 Bohr   0.0
[INPUT]  6 H      0.878025000000  -0.506928000000  -1.615912000000 AA    1.659226780521  -0.957955084874  -3.053631121398 Bohr   0.0
[INPUT]  7 H     -0.878025000000  -0.506928000000  -1.615912000000 AA   -1.659226780521  -0.957955084874  -3.053631121398 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [3    /1   ]  3.42525091        0.15432897
                                0.62391373        0.53532814
                                0.1688554         0.44463454
[INPUT] C
[INPUT] 0    0    [3    /1   ]  71.616837         0.15432897
                                13.045096         0.53532814
                                3.5305122         0.44463454
[INPUT] 0    0    [3    /1   ]  2.9412494         -0.09996723
                                0.6834831         0.39951283
                                0.2222899         0.70011547
[INPUT] 1    0    [3    /1   ]  2.9412494         0.15591627
                                0.6834831         0.60768372
                                0.2222899         0.39195739

nuclear repulsion = 59.2192397738578
number of shells = 13
number of NR pGTOs = 57
number of NR cGTOs = 19
basis = sto-3g
ecp = {}
CPU time:       561.08


******** <class 'pyscf.scf.uhf.UHF'> ********
method = UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/_x/xd2ms3z958s6pfllwphw48vm0000gn/T/tmp3ruqby05
max_memory 4000 MB (current use 0 MB)
number electrons alpha = 11  beta = 11
Set gradient conv threshold to 3.16228e-05
E1 = -266.2808025525285  Ecoul = 92.72017939073126
init E= -114.341383387939
cond(S) = 18.680234427036527
    CPU time for initialize scf      0.77 sec, wall time      0.18 sec
  alpha nocc = 11  HOMO = -0.391186950455524  LUMO = 0.0983378211243638
  beta  nocc = 11  HOMO = -0.36541720453927  LUMO = 0.104621611881027
  alpha mo_energy =
[-11.312845   -11.27882155 -11.25403539  -1.58566861  -1.31886017
  -0.83574505  -0.6467592   -0.64675919  -0.62538068  -0.39118695
  -0.39118695   0.09833782   0.09833782   0.25030044   0.45455908
   0.46903668   0.46903669   0.48258218   1.22376865]
  beta  mo_energy =
[-11.31514467 -11.27981474 -11.2552223   -1.47856227  -1.23299357
  -0.78284382  -0.59568074  -0.59568073  -0.58768398  -0.3654172
  -0.3654172    0.10462161   0.10462161   0.25922141   0.46339562
   0.47541354   0.47541355   0.48849914   1.23108201]
multiplicity <S^2> = 0.00011198985  2S+1 = 1.000224
E1 = -271.9284794135579  Ecoul = 98.28918199784842
cycle= 1 E= -114.420057641852  delta_E= -0.0787  |g|= 0.181  |ddm|= 2.42
    CPU time for cycle= 1      1.10 sec, wall time      0.15 sec
  alpha nocc = 11  HOMO = -0.303787669074849  LUMO = 0.430976137083402
  beta  nocc = 11  HOMO = -0.30417972532845  LUMO = 0.430669009134716
  alpha mo_energy =
[-11.05303994 -10.9467609  -10.91904161  -0.98212544  -0.88574421
  -0.65932136  -0.55314739  -0.55314739  -0.52677823  -0.30378767
  -0.30378767   0.43097614   0.43097614   0.58752195   0.72692526
   0.73747611   0.73747612   0.77524054   1.56503461]
  beta  mo_energy =
[-11.05322931 -10.94713815 -10.91938151  -0.98222418  -0.88598735
  -0.65880887  -0.5530172   -0.5530172   -0.52593212  -0.30417973
  -0.30417973   0.43066901   0.43066901   0.58715867   0.72641986
   0.73772856   0.73772857   0.77499171   1.56505478]
multiplicity <S^2> = 2.0153822e-05  2S+1 = 1.0000403
E1 = -271.38680338509266  Ecoul = 97.72147748450672
cycle= 2 E= -114.446086126728  delta_E= -0.026  |g|= 0.0524  |ddm|= 0.333
    CPU time for cycle= 2      0.06 sec, wall time      0.02 sec
  alpha nocc = 11  HOMO = -0.332887663507342  LUMO = 0.404977115221631
  beta  nocc = 11  HOMO = -0.333065019729485  LUMO = 0.404741126365232
  alpha mo_energy =
[-11.08290369 -11.02432433 -10.95238778  -1.00783551  -0.90458757
  -0.65745407  -0.56664752  -0.56664752  -0.56260189  -0.33288766
  -0.33288766   0.40497712   0.40497712   0.58134935   0.72249796
   0.72364055   0.72364056   0.76226925   1.52727696]
  beta  mo_energy =
[-11.08276381 -11.02440893 -10.95251395  -1.00771839  -0.90459184
  -0.65743909  -0.56653885  -0.56653885  -0.56237398  -0.33306502
  -0.33306502   0.40474113   0.40474113   0.58146916   0.72246878
   0.72382775   0.72382776   0.76224493   1.52722256]
multiplicity <S^2> = 6.1961172e-06  2S+1 = 1.0000124
E1 = -271.45100252715713  Ecoul = 97.7844249812469
cycle= 3 E= -114.447337772052  delta_E= -0.00125  |g|= 0.0353  |ddm|= 0.0988
    CPU time for cycle= 3      0.03 sec, wall time      0.01 sec
  alpha nocc = 11  HOMO = -0.335113053478649  LUMO = 0.403848429093951
  beta  nocc = 11  HOMO = -0.335231467783495  LUMO = 0.403688448537901
  alpha mo_energy =
[-11.07527108 -11.00041029 -10.98401817  -1.0021874   -0.90486234
  -0.66434951  -0.56106676  -0.56106676  -0.55943082  -0.33511305
  -0.33511305   0.40384843   0.40384843   0.58277042   0.72659273
   0.72926231   0.72926232   0.76311105   1.52450209]
  beta  mo_energy =
[-11.07510975 -11.00044177 -10.98409209  -1.00206493  -0.90482451
  -0.6643759   -0.56099538  -0.56099538  -0.55934436  -0.33523147
  -0.33523147   0.40368845   0.40368845   0.58292543   0.72663886
   0.72941457   0.72941458   0.76313221   1.52443386]
multiplicity <S^2> = 3.2640293e-06  2S+1 = 1.0000065
E1 = -271.4024807712185  Ecoul = 97.73522983647473
cycle= 4 E= -114.448011160886  delta_E= -0.000673  |g|= 0.00217  |ddm|= 0.0381
    CPU time for cycle= 4      0.00 sec, wall time      0.00 sec
  alpha nocc = 11  HOMO = -0.332736986157211  LUMO = 0.406154322744565
  beta  nocc = 11  HOMO = -0.332804458073709  LUMO = 0.406064706085806
  alpha mo_energy =
[-11.07549368 -10.99727359 -10.97803936  -1.00075212  -0.90319944
  -0.66301731  -0.56130684  -0.56130684  -0.55878145  -0.33273699
  -0.33273699   0.40615432   0.40615432   0.58440738   0.72636112
   0.7290436    0.72904361   0.76373774   1.5272265 ]
  beta  mo_energy =
[-11.0753856  -10.99728382 -10.97809281  -1.00064595  -0.9031713
  -0.66302226  -0.56126609  -0.56126609  -0.55873877  -0.33280446
  -0.33280446   0.40606471   0.40606471   0.58450593   0.72639087
   0.72914357   0.72914358   0.76375317   1.52717047]
multiplicity <S^2> = 1.4149095e-06  2S+1 = 1.0000028
E1 = -271.40695474952383  Ecoul = 97.73970011372973
cycle= 5 E= -114.448014861936  delta_E= -3.7e-06  |g|= 0.000363  |ddm|= 0.00381
    CPU time for cycle= 5      0.00 sec, wall time      0.00 sec
  alpha nocc = 11  HOMO = -0.332748199238963  LUMO = 0.406131568246666
  beta  nocc = 11  HOMO = -0.332792106107403  LUMO = 0.406076569425351
  alpha mo_energy =
[-11.07494429 -10.99736011 -10.9780873   -1.00064794  -0.90313697
  -0.66304925  -0.56114998  -0.56114998  -0.55868313  -0.3327482
  -0.3327482    0.40613157   0.40613157   0.58447968   0.72651129
   0.72922798   0.72922799   0.76380825   1.52720246]
  beta  mo_energy =
[-11.07487629 -10.99735695 -10.97812692  -1.00057238  -0.90312668
  -0.66305354  -0.56112097  -0.56112097  -0.55865558  -0.33279211
  -0.33279211   0.40607657   0.40607657   0.58454138   0.72653011
   0.7292935    0.72929351   0.76381936   1.52716973]
multiplicity <S^2> = 7.0559334e-07  2S+1 = 1.0000014
E1 = -271.40663581993556  Ecoul = 97.73938101833579
cycle= 6 E= -114.448015027742  delta_E= -1.66e-07  |g|= 0.00021  |ddm|= 0.000629
    CPU time for cycle= 6      0.01 sec, wall time      0.00 sec
  alpha nocc = 11  HOMO = -0.332772193418831  LUMO = 0.406094452805422
  beta  nocc = 11  HOMO = -0.332791605998297  LUMO = 0.406076452109476
  alpha mo_energy =
[-11.07505913 -10.997367   -10.97812658  -1.00065322  -0.90314508
  -0.66307886  -0.56116555  -0.56116554  -0.55870631  -0.33277219
  -0.33277219   0.40609445   0.40609445   0.58447073   0.72649075
   0.72922232   0.72922233   0.76378102   1.52717231]
  beta  mo_energy =
[-11.07503725 -10.99735049 -10.9781514   -1.00061381  -0.90315601
  -0.66308231  -0.56114983  -0.56114983  -0.55869293  -0.33279161
  -0.33279161   0.40607645   0.40607645   0.58448931   0.72649634
   0.72924848   0.72924849   0.76378672   1.52716462]
multiplicity <S^2> = 2.7727379e-07  2S+1 = 1.0000006
E1 = -271.40668608860403  Ecoul = 97.73943119957772
cycle= 7 E= -114.448015115169  delta_E= -8.74e-08  |g|= 7.33e-05  |ddm|= 0.000661
    CPU time for cycle= 7      0.02 sec, wall time      0.01 sec
  alpha nocc = 11  HOMO = -0.332778462818045  LUMO = 0.406088487149826
  beta  nocc = 11  HOMO = -0.332788239942268  LUMO = 0.406085361081136
  alpha mo_energy =
[-11.07501372 -10.99737637 -10.9781263   -1.00064096  -0.90313785
  -0.66306972  -0.56115748  -0.56115748  -0.55869732  -0.33277846
  -0.33277846   0.40608849   0.40608849   0.58448378   0.72649927
   0.72923706   0.72923707   0.76378917   1.52716763]
  beta  mo_energy =
[-11.07501366 -10.99735566 -10.97814523  -1.00062009  -0.90315913
  -0.66307295  -0.56114785  -0.56114785  -0.55868956  -0.33278824
  -0.33278824   0.40608536   0.40608536   0.58448282   0.72649901
   0.72924474   0.72924475   0.7637921    1.52716948]
multiplicity <S^2> = 2.0681163e-07  2S+1 = 1.0000004
E1 = -271.40666038913923  Ecoul = 97.73940548843167
cycle= 8 E= -114.44801512685  delta_E= -1.17e-08  |g|= 1.44e-05  |ddm|= 0.000305
    CPU time for cycle= 8      0.01 sec, wall time      0.00 sec
  alpha nocc = 11  HOMO = -0.332775144636414  LUMO = 0.40609224700889
  beta  nocc = 11  HOMO = -0.332784903678987  LUMO = 0.406088974539732
  alpha mo_energy =
[-11.07501699 -10.99736976 -10.97811919  -1.00063893  -0.90313605
  -0.66306646  -0.56116018  -0.56116018  -0.55869637  -0.33277514
  -0.33277514   0.40609225   0.40609225   0.58448777   0.72649752
   0.729235     0.72923501   0.76379057   1.52717244]
  beta  mo_energy =
[-11.0750192  -10.99735009 -10.97813806  -1.00062123  -0.90315853
  -0.66306979  -0.56115106  -0.56115106  -0.55868924  -0.3327849
  -0.3327849    0.40608897   0.40608898   0.58448618   0.7264972
   0.72924072   0.72924073   0.76379302   1.52717346]
multiplicity <S^2> = 1.9555026e-07  2S+1 = 1.0000004
E1 = -271.40667473120124  Ecoul = 97.73941983011105
cycle= 9 E= -114.448015127232  delta_E= -3.83e-10  |g|= 5.79e-06  |ddm|= 4.39e-05
    CPU time for cycle= 9      0.00 sec, wall time      0.00 sec
  alpha nocc = 11  HOMO = -0.332775336027697  LUMO = 0.406092148810466
  beta  nocc = 11  HOMO = -0.33278518970349  LUMO = 0.406088546068883
  alpha mo_energy =
[-11.07501692 -10.99736941 -10.97812016  -1.0006386   -0.90313619
  -0.66306677  -0.56115993  -0.56115993  -0.55869632  -0.33277534
  -0.33277534   0.40609215   0.40609215   0.58448722   0.72649755
   0.72923528   0.72923529   0.76379046   1.52717243]
  beta  mo_energy =
[-11.07501922 -10.99735026 -10.97813897  -1.00062149  -0.90315858
  -0.66307008  -0.56115091  -0.56115091  -0.55868937  -0.33278519
  -0.33278519   0.40608855   0.40608855   0.58448603   0.72649737
   0.72924081   0.72924082   0.7637928    1.52717288]
multiplicity <S^2> = 1.895287e-07  2S+1 = 1.0000004
E1 = -271.4066729651787  Ecoul = 97.73941806403084
Extra cycle  E= -114.44801512729  delta_E= -5.77e-11  |g|= 4.54e-06  |ddm|= 1.02e-05
    CPU time for scf_cycle      2.00 sec, wall time      0.38 sec
    CPU time for SCF      2.00 sec, wall time      0.38 sec
converged SCF energy = -114.44801512729  <S^2> = 1.895287e-07  2S+1 = 1.0000004
    CPU time for UHF partial hessian      1.52 sec, wall time      0.83 sec
    CPU time for UHF hessian      1.83 sec, wall time      1.02 sec
E1 = -271.4066729651787  Ecoul = 97.73941806403084
E1 = -271.4066729651787  Ecoul = 97.73941806403084
