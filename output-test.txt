#INFO: **** input file is /Users/jaydenl/Dev/ASDRP/QCHEM/PySCF-UI/stream.py ****
import streamlit as st
import streamlit.components.v1 as components
from pyscf import gto, scf
from streamlit.runtime.scriptrunner import add_script_run_ctx
import threading
import time
from stmol import *
import py3Dmol
from rdkit import Chem
from rdkit.Chem import rdDetermineBonds
from rdkit.Chem.rdmolfiles import MolFromXYZFile
from rdkit.Chem import Descriptors, AllChem
from rdkit.Chem.Draw import MolToImage
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from collections import defaultdict
import altair as alt
import os
from pyscf.hessian import thermo
from streamlit_extras.row import row
from utils import getAtomicToMoleculeName
# R^2
from sklearn.metrics import r2_score
import requests
import timeit

api_url = "http://0.0.0.0:8000/calculate"
moleculeNames = getAtomicToMoleculeName()
trend_threshold = 0.95

if 'queue' not in st.session_state:
    st.session_state['queue'] = []
if 'results' not in st.session_state:
    st.session_state['results'] = []
if 'computing' not in st.session_state:
    st.session_state['computing'] = False

# get all files in directory names precomputed_molecules:
precomputed_molecules = list(map(lambda x: x.split(
    ".")[0], os.listdir("precomputed_molecules")))


def compute_pyscf(atom, basis_option, verbose_option, temperature, pressure):
    # print(atom)
    # print(basis_option)
    # print(verbose_option)
    mol = gto.Mole()
    mol.atom = atom
    mol.basis = basis_option
    # mol.verbose = verbose_option
    mol.verbose = int(verbose_option[0])
    mol.output = 'output-test.txt'
    mol.build()

    # mf = scf.RHF(mol)
    # mf.kernel()
    mf =mol.UHF().run()
    hessian = mf.Hessian().kernel()
    harmanalysis = thermo.harmonic_analysis(mf.mol, hessian)
    thermo_info =  thermo.thermo(mf, harmanalysis['freq_au'], temperature, pressure)
    
    outputFile = open("output-test.txt", "r")
    # Extract energy and time information
    time = None
    hessian_time = None
    energy = None
    for line in outputFile.readlines():
        if line.startswith("    CPU time for SCF"):
            time = float(line.split(" ")[-2])

        elif line.startswith("converged SCF energy = "):
            energy = float([i for i in line.split() if i != ''][4])
        elif line.startswith("    CPU time for UHF hessian"):
            hessian_time = float(line.split(" ")[-2])
    
    #Helmholtz Free Energy
    F_elec = (thermo_info['E_elec'][0] - temperature * thermo_info['S_elec' ][0], 'Eh')
    F_trans = (thermo_info['E_trans'][0] - temperature * thermo_info['S_trans'][0], 'Eh')
    F_rot = (thermo_info['E_rot'][0] - temperature * thermo_info['S_rot'][0], 'Eh')
    F_vib = (thermo_info['E_vib'][0] - temperature * thermo_info['S_vib'][0], 'Eh')
    F_tot = (F_elec[0] + F_trans[0] + F_rot[0] + F_vib[0], 'Eh') 
    
    #Massieu Potential/Helmholtz Free Entropy
    Φ_elec = (F_elec[0]/(-1*temperature), 'Eh/K')
    Φ_trans = (F_trans[0]/(-1*temperature), 'Eh/K')
    Φ_rot = (F_rot[0]/(-1*temperature), 'Eh/K')
    Φ_vib = (F_vib[0]/(-1*temperature), 'Eh/K')
    Φ_tot = (F_tot[0]/(-1*temperature), 'Eh/K')    
    
    #Planck Potential/Gibbs Free Entropy
    Ξ_elec = (thermo_info['G_elec'][0]/(-1*temperature), 'Eh/K')
    Ξ_trans = (thermo_info['G_trans'][0]/(-1*temperature), 'Eh/K')
    Ξ_rot = (thermo_info['G_rot'][0]/(-1*temperature), 'Eh/K')
    Ξ_vib = (thermo_info['G_vib'][0]/(-1*temperature), 'Eh/K')
    Ξ_tot = (thermo_info['G_tot'][0]/(-1*temperature), 'Eh/K')   
    
    data = {
        # 'energy': energy,
        'Runtime': time,
        'Hessian Runtime': hessian_time,
        'Converged SCF-HF Nuclear Energy (Ha)': mf.energy_nuc(),
        'Converged SCF-HF Electronic Energy (Ha)': mf.energy_elec(),
        'Converged SCF-HF Total Energy (Ha)': mf.energy_tot(),
        # thermodynamic data
        # Heat Capacity
        'Constant Volume Heat Capacity (Ha/K)': thermo_info['Cv_tot'][0],
        'Constant Pressure Heat Capacity (Ha/K)': thermo_info['Cp_tot'][0],
        'Zero-Point Energy (Ha)': thermo_info['ZPE'][0],
        '0K Internal Energy (Ha)': thermo_info['E_0K'][0],
        'Internal Energy (at given T) (Ha)': thermo_info['E_tot'][0],
            'Electronic Internal Energy (Ha)': thermo_info['E_elec'][0],
            'Vibrational Internal Energy (Ha)': thermo_info['E_vib'][0],
            'Translational Internal Energy (Ha)': thermo_info['E_trans'][0],
            'Rotational Internal Energy (Ha)': thermo_info['E_rot'][0],
        # enthalpy
        'Enthalpy (Ha)': thermo_info['H_tot'][0],
            'Electronic Enthalpy (Ha)': thermo_info['H_elec'][0],
            'Vibrational Enthalpy (Ha)': thermo_info['H_vib'][0],
            'Translational Enthalpy (Ha)': thermo_info['H_trans'][0],
            'Rotational Enthalpy (Ha)': thermo_info['H_rot'][0],
        # gibbs free energy
        'Gibbs Free Energy (Ha)': thermo_info['G_tot'][0],
            'Electronic Gibbs Free Energy (Ha)': thermo_info['G_elec'][0],
            'Vibrational Gibbs Free Energy (Ha)': thermo_info['G_vib'][0],
            'Translational Gibbs Free Energy (Ha)': thermo_info['G_trans'][0],
            'Rotational Gibbs Free Energy (Ha)': thermo_info['G_rot'][0],
        # Helmholtz free energy
        'Helmholtz Free Energy (Ha)': F_tot[0],
            'Electronic Helmholtz Free Energy (Ha)': F_elec[0],
            'Vibrational Helmholtz Free Energy (Ha)': F_vib[0],
            'Translational Helmholtz Free Energy (Ha)': F_trans[0],
            'Rotational Helmholtz Free Energy (Ha)': F_rot[0],
        # Entropy
        'Entropy (Ha/K)': thermo_info['S_tot'][0],
            'Electronic Entropy (Ha/K)': thermo_info['S_elec'][0],
            'Vibrational Entropy (Ha/K)': thermo_info['S_vib'][0],
            'Translational Entropy (Ha/K)': thermo_info['S_trans'][0],
            'Rotational Entropy (Ha/K)': thermo_info['S_rot'][0],
        # Massieu Potential/Helmholtz Free Entropy
        'Massieu Potential/Helmholtz Free Potential (Ha/K)': Φ_tot[0],
            'Electronic Massieu Potential/Helmholtz Free Potential (Ha/K)': Φ_elec[0],
            'Vibrational Massieu Potential/Helmholtz Free Potential (Ha/K)': Φ_vib[0],
            'Translational Massieu Potential/Helmholtz Free Potential (Ha/K)': Φ_trans[0],
            'Rotational Massieu Potential/Helmholtz Free Potential (Ha/K)': Φ_rot[0],
        # Planck Potential/Gibbs Free Entropy
        'Planck Potential/Gibbs Free Potential (Ha/K)': Ξ_tot[0],
            'Electronic Planck Potential/Gibbs Free Potential (Ha/K)': Ξ_elec[0],
            'Vibrational Planck Potential/Gibbs Free Potential (Ha/K)': Ξ_vib[0],
            'Translational Planck Potential/Gibbs Free Potential (Ha/K)': Ξ_trans[0],
            'Rotational Planck Potential/Gibbs Free Potential (Ha/K)': Ξ_rot[0],
    }

    return data


def getMoleculeName(atom):
    d = {}
    for line in atom.split("\n"):
        try:
            name = line.split()[0]
            if name in d:
                d[name] += 1
            else:
                d[name] = 1
        except:
            pass
    name = ""
    for key in d:
        name += key + str(d[key])
    return name


# Streamlit layout
st.title("PySCF")

# Function to process the uploaded text file


def process_text_file(uploaded_file):
    if uploaded_file is not None:
        # Read the contents of the file
        text_contents = uploaded_file.getvalue().decode("utf-8")
        return text_contents
    else:
        return None


def addToQueue(atom, basis):
    st.session_state['queue'].append((atom, basis))


tabDatabase, tabTextInput, tabFileInput = st.tabs(
    ["Database", "Text Input", "File Input"])

basis_option = st.selectbox(
    "Basis", ["cc-pVTZ", "cc-pVDZ", "cc-pVQZ", "cc-pV5Z", "sto-3g"])
verbose_option = st.selectbox("Verbose", index=2, options=[
                              "3, energy only", "4, cycles and energy", "5, cycles energy and runtime", "9, max"])
# verbose_option = st.slider("Verbose", min_value=0, max_value=9, value=2)

#Second Input (NEW) - Pressure of the system
# pressure = 101325 #in Pascals (Pa), 101325 Pa = 1 atm
#Third Input (NEW) - Temperature of the system
# temperature = 298.15 #in K, 298.15K = room temperature (25 degrees Celsius) 
thermo_row = row(2)
temp = thermo_row.number_input("Temperature (K)", min_value=0.0, value=298.15)
press = thermo_row.number_input("Pressure (Pa)", min_value=0.0, value=101325.0)

with tabDatabase:
    selectedMolecule = st.selectbox(
        'Search Molecule Database', precomputed_molecules)
    if st.button('Add to Queue', use_container_width=True, key="db"):
        if selectedMolecule:
            parseDatafile = open(
                "precomputed_molecules/" + selectedMolecule + ".geom.txt", "r").readlines()[4:]
            parseDatafile = "\n".join(parseDatafile[:-1])
            addToQueue(parseDatafile, basis_option)
        else:
            st.warning(
                "Please select a molecule using dropdown menu or inputting a text file.")

with tabTextInput:
    # Create a Streamlit button which gives example
    with st.expander("See Example Input"):
        st.write("C 0.0000000 0.0000000 0.0000000")
        st.write("H 0.6311940 0.6311940 0.6311940")
        st.write("H -0.6311940 -0.6311940 0.6311940")
        st.write("H -0.6311940 0.6311940 -0.6311940")
        st.write("H 0.6311940 -0.6311940 -0.631194")
    # Fills xyz_input text area to the contents of the uploaded file
    xyz_input = st.text_area("XYZ Input", key="textxyz")

    if st.button('Add to Queue', use_container_width=True, key="text"):
        if xyz_input:
            addToQueue(xyz_input, basis_option)
        else:
            st.warning(
                "Please provide an XYZ input using the text box or inputting a text file.")

with tabFileInput:
    # Create a Streamlit button which gives example
    with st.expander("See Example Input"):
        st.write("C 0.0000000 0.0000000 0.0000000")
        st.write("H 0.6311940 0.6311940 0.6311940")
        st.write("H -0.6311940 -0.6311940 0.6311940")
        st.write("H -0.6311940 0.6311940 -0.6311940")
        st.write("H 0.6311940 -0.6311940 -0.631194")
    # Display file uploader for a single text file and processes it
    uploaded_file = st.file_uploader("Upload a XYZ input", type=["txt"])
    text_contents = process_text_file(uploaded_file)
    xyz_input = st.text_area(
        "XYZ Input", value=text_contents, key="filexyz") if text_contents else None
    if st.button('Add to Queue', use_container_width=True, key="filequeue"):
        if text_contents:
            addToQueue(text_contents, basis_option)
        else:
            st.warning(
                "Please provide an XYZ input using file uploader")

col1, col2, col3, col4 = st.columns(4, gap="small")

# if col1.button("Add to Queue"):
#     if xyz_input:
#         addToQueue(xyz_input)
#     else:
#         st.warning(
#             "Please provide an XYZ input using the text box or inputting a text file.")

# Computes only if something is added to the queue; grayed out otherwise
compute_disabled = len(st.session_state['queue']) == 0
if st.button("Compute", disabled=compute_disabled, type="primary", use_container_width=True) or st.session_state['computing'] == True:
    if len(st.session_state['queue']) > 0:
        with st.spinner("Computing " + getMoleculeName(st.session_state['queue'][0][0]) + "..."):
            st.session_state['computing'] = True
            atom = st.session_state['queue'][0][0]
            basis = st.session_state['queue'][0][1]
            st.session_state['queue'].pop(0)
            # st.write("Computing...")
            # progress_text = "Computing..."
            # my_bar = st.progress(0, text=progress_text)

            # for percent_complete in range(100):
            #     time.sleep(0.01)
            #     my_bar.progress(percent_complete + 1, text=progress_text)
            # time.sleep(1)
            # my_bar.empty()

            # Delete empty lines
            parsed = [line for line in atom.splitlines() if line.strip() != ""]
            xyz = "\n".join(parsed)
            mol = f"{len(parsed)}\nname\n{str(xyz)}"

            # output xyz into molecule.xyz file
            with open('molecule.xyz', 'w') as f:
                f.write(f"{len(parsed)}\nhi\n{str(xyz)}")

            raw_mol = MolFromXYZFile('molecule.xyz')
            rdkit_mol = Chem.Mol(raw_mol)
            rdDetermineBonds.DetermineBonds(rdkit_mol, charge=0)
            tmpmol = Chem.AddHs(rdkit_mol)
            AllChem.EmbedMolecule(tmpmol)
            smiles = Chem.MolToSmiles(tmpmol)
            start = timeit.default_timer()
            data = compute_pyscf(
                atom, basis, verbose_option, temp, press)
            total_time = timeit.default_timer() - start
            
            # tdict = {"atom": atom, "basis_option": basis, "verbose_option": verbose_option, "temperature": temp, "pressure": press}
            # response = requests.post(api_url, params=tdict)
            
            # if response.status_code == 200:
            #     data = response.json()
            #     print("Yay, it worked!")
            # else:
            #     print(f"Error: {response.status_code} - {response.text}")   
            data['Atoms'] = rdkit_mol.GetNumAtoms()
            data['Bonds'] = rdkit_mol.GetNumBonds()
            data['Rings'] = rdkit_mol.GetRingInfo().NumRings()
            data['Weight'] = Descriptors.MolWt(rdkit_mol)
            data['Molecule'] = mol
            data['Rdkit Molecule'] = rdkit_mol
            data['Basis'] = basis
            data['Molecule Name'] = getMoleculeName(atom)
            data['Smiles'] = smiles
            data['Real Compute Time'] = total_time
            
            st.session_state['results'].append(data)
            st.rerun()
            
    elif st.session_state['computing'] == True:
        st.session_state['computing'] = False
    else:
        st.warning("Please add an XYZ input to the queue.")

if 'queue' in st.session_state:
    st.subheader("Queue")
    for queue_item in st.session_state['queue']:
        st.write(f"{getMoleculeName(queue_item[0])} | {queue_item[1]}")


tab1, tab2, tab3 = st.tabs(['Results', 'View Graphs', 'View Logs'])

with tab1:
    if 'results' in st.session_state:
        st.subheader("Results")
        for result_item in st.session_state['results']:
            data = result_item
            energy = {
                'Internal Energy (E - Ha)':[data['Internal Energy (at given T) (Ha)'],data['Electronic Internal Energy (Ha)'],data['Vibrational Internal Energy (Ha)'],data['Translational Internal Energy (Ha)'],data['Rotational Internal Energy (Ha)']],
                'Helmholtz Free Energy (F - Ha)':[data['Helmholtz Free Energy (Ha)'],data['Electronic Helmholtz Free Energy (Ha)'],data['Vibrational Helmholtz Free Energy (Ha)'],data['Translational Helmholtz Free Energy (Ha)'],data['Rotational Helmholtz Free Energy (Ha)']],
                'Gibbs Free Energy (G - Ha)':[data['Gibbs Free Energy (Ha)'],data['Electronic Gibbs Free Energy (Ha)'],data['Vibrational Gibbs Free Energy (Ha)'],data['Translational Gibbs Free Energy (Ha)'],data['Rotational Gibbs Free Energy (Ha)']],
                'Enthalpy (H - Ha)':[data['Enthalpy (Ha)'],data['Electronic Enthalpy (Ha)'],data['Vibrational Enthalpy (Ha)'],data['Translational Enthalpy (Ha)'],data['Rotational Enthalpy (Ha)']],  
            }
            pd.set_option("display.precision", 16)
            enerdf = pd.DataFrame(energy, index = ["Total","Electronic","Vibrational","Translational","Rotational"])
            
            entropy = {
                'Entropy (S - Ha/K)':[data['Entropy (Ha/K)'],data['Electronic Entropy (Ha/K)'],data['Vibrational Entropy (Ha/K)'],data['Translational Entropy (Ha/K)'],data['Rotational Entropy (Ha/K)']],
                'Helmholtz Free Entropy (Φ - Ha/K)':[data['Massieu Potential/Helmholtz Free Potential (Ha/K)'],data['Electronic Massieu Potential/Helmholtz Free Potential (Ha/K)'],data['Vibrational Massieu Potential/Helmholtz Free Potential (Ha/K)'],data['Translational Massieu Potential/Helmholtz Free Potential (Ha/K)'],data['Rotational Massieu Potential/Helmholtz Free Potential (Ha/K)']],
                'Gibbs Free Entropy (Ξ - Ha/K)':[data['Planck Potential/Gibbs Free Potential (Ha/K)'],data['Electronic Planck Potential/Gibbs Free Potential (Ha/K)'],data['Vibrational Planck Potential/Gibbs Free Potential (Ha/K)'],data['Translational Planck Potential/Gibbs Free Potential (Ha/K)'],data['Rotational Planck Potential/Gibbs Free Potential (Ha/K)']],
            }
            
            excluded_keys = ['Internal Energy (at given T) (Ha)', 'Electronic Internal Energy (Ha)', 'Vibrational Internal Energy (Ha)', 'Translational Internal Energy (Ha)', 'Rotational Internal Energy (Ha)', 'Helmholtz Free Energy (Ha)', 'Electronic Helmholtz Free Energy (Ha)', 'Vibrational Helmholtz Free Energy (Ha)', 'Translational Helmholtz Free Energy (Ha)', 'Rotational Helmholtz Free Energy (Ha)', 'Gibbs Free Energy (Ha)', 'Electronic Gibbs Free Energy (Ha)', 'Vibrational Gibbs Free Energy (Ha)', 'Translational Gibbs Free Energy (Ha)', 'Rotational Gibbs Free Energy (Ha)', 'Enthalpy (Ha)', 'Electronic Enthalpy (Ha)', 'Vibrational Enthalpy (Ha)', 'Translational Enthalpy (Ha)', 'Rotational Enthalpy (Ha)', 'Entropy (Ha/K)', 'Electronic Entropy (Ha/K)', 'Vibrational Entropy (Ha/K)', 'Translational Entropy (Ha/K)', 'Rotational Entropy (Ha/K)', 'Massieu Potential/Helmholtz Free Potential (Ha/K)', 'Electronic Massieu Potential/Helmholtz Free Potential (Ha/K)', 'Vibrational Massieu Potential/Helmholtz Free Potential (Ha/K)', 'Translational Massieu Potential/Helmholtz Free Potential (Ha/K)', 'Rotational Massieu Potential/Helmholtz Free Potential (Ha/K)', 'Planck Potential/Gibbs Free Potential (Ha/K)', 'Electronic Planck Potential/Gibbs Free Potential (Ha/K)', 'Vibrational Planck Potential/Gibbs Free Potential (Ha/K)', 'Translational Planck Potential/Gibbs Free Potential (Ha/K)', 'Rotational Planck Potential/Gibbs Free Potential (Ha/K)'] + ['Molecule', 'Rdkit Molecule', 'Basis', 'Molecule Name', 'Atoms', 'Bonds', 'Rings', 'Weight', 'Runtime', 'Hessian Runtime']
            
            pd.set_option("display.precision", 16)
            entrodf = pd.DataFrame(entropy, index = ["Total","Electronic","Vibrational","Translational","Rotational"])
            
            with st.expander(data['Molecule Name'] + ": " + str(round(data['Real Compute Time'], 2)) + "s"):
                result_col_1, result_col_2 = st.columns([2, 1])
                result_col_1.write(
                    f"{data['Molecule Name']} | {data['Basis']} | Runtime: {data['Runtime']} seconds | Hessian Runtime: {data['Hessian Runtime']} seconds")
                result_col_1.write(
                    f"\# of Atoms: {data['Atoms']} | \# of Bonds: {data['Bonds']} | \# of Rings:  {data['Rings']}")
                result_col_1.write(
                    f"Molecular Weight: {data['Weight']}")
                # energy data
                for key, value in data.items():
                    if key not in excluded_keys:
                        result_col_1.write(f"{key}: {value}")

                with result_col_2:
                    speck_plot(
                        data['Molecule'], component_h=200, component_w=200, wbox_height="auto", wbox_width="auto")
                    st.image(MolToImage(data['Rdkit Molecule'], size=(200, 200)))
                    st.image(MolToImage(Chem.MolFromSmiles(data['Smiles']), size=(200, 200)))
                # linebreak
                st.write("")
                st.write("")
                st.table(data=enerdf)
                st.table(data=entrodf)
                

with tab2:
    # st.subheader("Comparative Graphs (WIP)")
    
    def count_atoms(molecule):
    # Check that there is a valid molecule
        if molecule:

            # Add hydrogen atoms--RDKit excludes them by default
            molecule_with_Hs = Chem.AddHs(molecule)
            comp = defaultdict(lambda: 0)

            # Get atom counts
            for atom in molecule_with_Hs.GetAtoms():
                comp[atom.GetAtomicNum()] += 1

            # # If charged, add charge as "atomic number" 0
            # charge = GetFormalCharge(molecule_with_Hs)
            # if charge != 0:
            #     comp[0] = charge
            return comp

    if 'results' in st.session_state and len(st.session_state['results']) > 1:
        st.subheader("Comparative Graphs")

        independent = [
            'Atoms',
            'Bonds',
            # 'Rings',
            'Weight',
        ]
        
        exclude = [
            'Basis',
            'Rings',
            'Rdkit Molecule',
            'Converged SCF-HF Electronic Energy (Ha)',
            'Molecule',
            'Molecule Name',
            'Smiles',
            'Real Compute Time'
        ]
        
        dependent = [i for i in st.session_state['results'][0].keys() if i not in independent]
        dependent = [i for i in dependent if i not in exclude]
        # print(dependent)
        
        df_columns = list(st.session_state['results'][0].keys())
        df_columns.remove('Rdkit Molecule')
        
        df = pd.DataFrame(st.session_state['results'], columns=df_columns)
        
        
        for label in independent:
            for target in dependent:
                # print(label, target)
                # print(df[label].values, df[target].values)
                # Linear Regression
                coeffs_linear = np.polyfit(
                    df[label].values, df[target].values, 1)
                poly1d_fn_linear = np.poly1d(coeffs_linear)
                x = np.linspace(min(df[label]), max(df[label]), 100)

                # Quadratic Regression
                coeffs_quad = np.polyfit(
                    df[label].values, df[target].values, 2)
                poly1d_fn_quad = np.poly1d(coeffs_quad)
                
                # calculate R^2
                r2_linear = r2_score(df[target], poly1d_fn_linear(df[label]))
                r2_quad = r2_score(df[target], poly1d_fn_quad(df[label]))
                
                if r2_linear >= trend_threshold or r2_quad >= trend_threshold:
                    st.markdown(f'### Number of {label} vs. {target}')
                    # Display Equations
                    st.markdown(
                        f"<span style='color: red;'>Best Fit Linear Equation ({target}): Y = {coeffs_linear[0]:.4f}x + {coeffs_linear[1]:.4f} (R^2 = {r2_linear:.4f})</span>", unsafe_allow_html=True)
                    st.markdown(
                        f"<span style='color: green;'>Best Fit Quadratic Equation ({target}): Y = {coeffs_quad[0]:.4f}x² + {coeffs_quad[1]:.4f}x + {coeffs_quad[2]:.4f} (R^2 = {r2_quad:.4f})</span>", unsafe_allow_html=True)

                    # Create a DataFrame for the regression lines
                    df_line = pd.DataFrame(
                        {label: x, 'Linear': poly1d_fn_linear(x), 'Quadratic': poly1d_fn_quad(x)})

                    # Plot
                    scatter = alt.Chart(df).mark_circle(size=60).encode(
                        x=label,
                        y=target,
                        tooltip=[label, target]
                    )

                    line_linear = alt.Chart(df_line).mark_line(color='red').encode(
                        x=label,
                        y='Linear'
                    )

                    line_quad = alt.Chart(df_line).mark_line(color='green').encode(
                        x=label,
                        y='Quadratic'
                    )

                    # Display the plot
                    st.altair_chart(scatter + line_linear +
                                    line_quad, use_container_width=True)
        
        
        # for atomic_num, count in count_atoms(st.session_state['results'][0]['rdkit_mol']).items():
        
        # atom_counts = [count_atoms(result_item['rdkit_mol'])
        #                for result_item in st.session_state['results']]

        # # Prepare datasets
        # num_atoms = [result_item['atoms']
        #              for result_item in st.session_state['results']]
        # num_bonds = [result_item['bonds'].GetNumBonds()
        #              for result_item in st.session_state['results']]
        # num_conformers = [result_item[4].GetNumConformers()
        #                   for result_item in st.session_state['results']]
        # # 6 and 1 are atomic code
        # num_carbons = [atom_counts[i][6] for i in range(len(atom_counts))]
        # num_hydrogens = [atom_counts[i][1] for i in range(len(atom_counts))]

        # energies = [result_item[1]
        #             for result_item in st.session_state['results']]
        # runtimes = [result_item[2]
        #             for result_item in st.session_state['results']]

        # df_atoms = pd.DataFrame(
        #     {'Atoms': num_atoms, 'Energy': energies, 'Runtime': runtimes})
        # df_bonds = pd.DataFrame(
        #     {'Bonds': num_bonds, 'Energy': energies, 'Runtime': runtimes})
        # df_conformers = pd.DataFrame(
        #     {'Conformers': num_conformers, 'Energy': energies, 'Runtime': runtimes})
        # df_carbons = pd.DataFrame(
        #     {'Carbons': num_carbons, 'Energy': energies, 'Runtime': runtimes})
        # df_hydrogens = pd.DataFrame(
        #     {'Hydrogens': num_hydrogens, 'Energy': energies, 'Runtime': runtimes})

        # Generate Graphs
        # for df, label in zip([df_atoms, df_bonds, df_carbons, df_hydrogens], ['Atoms', 'Bonds', 'Carbons', 'Hydrogens']):
        #     for target in ['Energy', 'Runtime']:
        #         st.markdown(f'### Number of {label} vs. {target}')

        #         # Linear Regression
        #         coeffs_linear = np.polyfit(
        #             df[label].values, df[target].values, 1)
        #         poly1d_fn_linear = np.poly1d(coeffs_linear)
        #         x = np.linspace(min(df[label]), max(df[label]), 100)

        #         # Quadratic Regression
        #         coeffs_quad = np.polyfit(
        #             df[label].values, df[target].values, 2)
        #         poly1d_fn_quad = np.poly1d(coeffs_quad)

        #         # Display Equations
        #         st.markdown(
        #             f"<span style='color: red;'>Best Fit Linear Equation ({target}): Y = {coeffs_linear[0]:.4f}x + {coeffs_linear[1]:.4f}</span>", unsafe_allow_html=True)
        #         st.markdown(
        #             f"<span style='color: green;'>Best Fit Quadratic Equation ({target}): Y = {coeffs_quad[0]:.4f}x² + {coeffs_quad[1]:.4f}x + {coeffs_quad[2]:.4f}</span>", unsafe_allow_html=True)

        #         # Create a DataFrame for the regression lines
        #         df_line = pd.DataFrame(
        #             {label: x, 'Linear': poly1d_fn_linear(x), 'Quadratic': poly1d_fn_quad(x)})

        #         # Plot
        #         scatter = alt.Chart(df).mark_circle(size=60).encode(
        #             x=label,
        #             y=target,
        #             tooltip=[label, target]
        #         )

        #         line_linear = alt.Chart(df_line).mark_line(color='red').encode(
        #             x=label,
        #             y='Linear'
        #         )

        #         line_quad = alt.Chart(df_line).mark_line(color='green').encode(
        #             x=label,
        #             y='Quadratic'
        #         )

        #         # Display the plot
        #         st.altair_chart(scatter + line_linear +
        #                         line_quad, use_container_width=True)

        #     # Display Equation
        #     # st.write(f"Best Fit Equation ({target}): Y = {coeffs[0]:.4f}x + {coeffs[1]:.4f}")

with tab3:
    with open('output-test.txt', 'r') as file:
        log_data = file.read()
        st.markdown(f'```\n{log_data}\n```')


# xyzview = py3Dmol.view(query='pdb:1A2C')
# xyzview.setStyle({'cartoon':{'color':'spectrum'}})
# showmol(xyzview, height = 500,width=800)

# def draw_with_spheres(mol):
#     v = py3Dmol.view(width=300,height=300)
#     IPythonConsole.addMolToView(mol,v)
#     v.zoomTo()
#     v.setStyle({'sphere':{'radius':0.3},'stick':{'radius':0.2}});
#     v.show()


# Attempt at creating an async queue, need to find a way to detect browser closing to stop the queue

# def runQueue():
#     for i in range(1, 10):
#         time.sleep(1)
#         print("test", str(i))


# if 'queue-running' not in st.session_state:
#     st.session_state['queue-running'] = True
#     t = threading.Thread(target=runQueue)
#     add_script_run_ctx(t)
#     t.start()

# components.html("""<html>
# <script>
#     const origClose = window.close;
#     window.close = () => {
#         console.log("asdf");
#         // origClose();
#     }
#     document.addEventListener("beforeunload", () => {
#                 alert(1);
#                 console.log(a.a.a.a);
#     })
# </script>
# <div style="color: white" onclick="">
#                 hihihihi
# </div>
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Jaydens-MacBook.local', release='23.0.0', version='Darwin Kernel Version 23.0.0: Fri Sep 15 14:41:34 PDT 2023; root:xnu-10002.1.13~1/RELEASE_ARM64_T8103', machine='arm64', processor='arm')  Threads 1
Python 3.8.18 | packaged by conda-forge | (default, Oct 10 2023, 15:46:56) 
[Clang 16.0.6 ]
numpy 1.24.4  scipy 1.10.1
Date: Sat Jun 22 19:58:50 2024
PySCF version 2.4.0
PySCF path  /Users/jaydenl/anaconda3/envs/pyscfui/lib/python3.8/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 3
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 O      0.000000000000   0.000000000000   0.113212000000 AA    0.000000000000   0.000000000000   0.213939674014 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.751174000000  -0.452850000000 AA    0.000000000000   1.419513131894  -0.855762475509 Bohr   0.0
[INPUT]  3 H      0.000000000000  -0.751174000000  -0.452850000000 AA    0.000000000000  -1.419513131894  -0.855762475509 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] O
[INPUT] 0    0    [8    /2   ]  15330             0.000508 -0.000115
                                2299              0.003929 -0.000895
                                522.4             0.020243 -0.004636
                                147.3             0.079181 -0.018724
                                47.55             0.230687 -0.058463
                                16.76             0.433118 -0.136463
                                6.207             0.35026 -0.17574
                                0.6882            -0.008154 0.603418
[INPUT] 0    0    [1    /1   ]  1.752                1
[INPUT] 0    0    [1    /1   ]  0.2384               1
[INPUT] 1    0    [3    /1   ]  34.46             0.015928
                                7.749             0.09974
                                2.28              0.310492
[INPUT] 1    0    [1    /1   ]  0.7156               1
[INPUT] 1    0    [1    /1   ]  0.214                1
[INPUT] 2    0    [1    /1   ]  2.314                1
[INPUT] 2    0    [1    /1   ]  0.645                1
[INPUT] 3    0    [1    /1   ]  1.428                1
[INPUT] H
[INPUT] 0    0    [3    /1   ]  33.87             0.006068
                                5.095             0.045308
                                1.159             0.202822
[INPUT] 0    0    [1    /1   ]  0.3258               1
[INPUT] 0    0    [1    /1   ]  0.1027               1
[INPUT] 1    0    [1    /1   ]  1.407                1
[INPUT] 1    0    [1    /1   ]  0.388                1
[INPUT] 2    0    [1    /1   ]  1.057                1

nuclear repulsion = 9.35396190989221
number of shells = 21
number of NR pGTOs = 74
number of NR cGTOs = 58
basis = cc-pVTZ
ecp = {}
CPU time:         4.89


******** <class 'pyscf.scf.uhf.UHF'> ********
method = UHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/_x/xd2ms3z958s6pfllwphw48vm0000gn/T/tmp0lg2jove
max_memory 4000 MB (current use 0 MB)
number electrons alpha = 5  beta = 5
Set gradient conv threshold to 3.16228e-05
E1 = -122.41150798387932  Ecoul = 37.057003198283255
init E= -76.0005428757039
cond(S) = 2192.2223073543996
    CPU time for initialize scf      0.59 sec, wall time      0.10 sec
  alpha nocc = 5  HOMO = -0.445844173288583  LUMO = 0.106606205768787
  beta  nocc = 5  HOMO = -0.449563135633076  LUMO = 0.102224322584804
  alpha mo_energy =
[-20.73407315  -1.58966529  -0.72820731  -0.55846281  -0.44584417
   0.10660621   0.1953049    0.51549531   0.58303547   0.62047755
   0.73011549   0.75092296   0.80929037   0.87520257   0.96484047
   1.04457698   1.2268183    1.53281943   1.57492162   1.96877466
   2.00050351   2.00455891   2.12286296   2.15765263   2.59842353
   2.93542969   3.37062122   3.51586286   3.60286883   3.69846081
   3.74608812   3.89596008   3.93272683   3.98903813   4.03702245
   4.08228867   4.1637117    4.34579229   4.39139568   4.61505689
   4.63413414   4.88127732   5.15547046   5.18840351   5.45168389
   5.97404954   6.53805112   6.79858939   6.81673739   6.92573261
   6.93393786   7.05481195   7.06482594   7.17353134   7.3523216
   7.71901801   8.26308924  13.07462734]
  beta  mo_energy =
[-20.74244011  -1.60904944  -0.73555961  -0.57416251  -0.44956314
   0.10222432   0.19291918   0.51393433   0.57792614   0.61951002
   0.72962122   0.74956111   0.8045427    0.87294919   0.96138298
   1.0457079    1.225279     1.53064464   1.57127826   1.96564496
   1.99819262   2.00485205   2.1181314    2.15545594   2.59586029
   2.93357688   3.36843595   3.51328733   3.59871336   3.69659253
   3.74373335   3.89186      3.93098972   3.987343     4.03542945
   4.0803968    4.16210033   4.34386665   4.39005129   4.61360372
   4.63248705   4.87860649   5.15267081   5.18714499   5.45043603
   5.97155305   6.53531039   6.79769558   6.81691424   6.92359099
   6.933632     7.05262269   7.06444577   7.17255567   7.35267681
   7.71873136   8.26009883  13.07318708]
multiplicity <S^2> = 0.00028924845  2S+1 = 1.0005783
E1 = -124.21398491119393  Ecoul = 38.837114483901075
cycle= 1 E= -76.0229085174007  delta_E= -0.0224  |g|= 0.307  |ddm|= 0.693
    CPU time for cycle= 1      0.16 sec, wall time      0.03 sec
  alpha nocc = 5  HOMO = -0.440729791034203  LUMO = 0.141514706060005
  beta  nocc = 5  HOMO = -0.440726192139827  LUMO = 0.141341320425426
  alpha mo_energy =
[-20.35259403  -1.30077455  -0.68516592  -0.51166621  -0.44072979
   0.14151471   0.20180874   0.55800544   0.59969048   0.68807912
   0.81105138   0.82110947   0.82555493   0.85328047   0.96292098
   1.16169459   1.19151791   1.55475308   1.59484902   2.04942608
   2.07100744   2.11243438   2.1901995    2.27476891   2.60608978
   2.98342354   3.36187048   3.49315228   3.55536455   3.64387719
   3.83855471   3.85438495   3.89050779   3.94358072   4.03654158
   4.09204571   4.22861377   4.34723919   4.4680584    4.58984056
   4.74461985   4.92664848   5.23891197   5.31853187   5.59914037
   6.13425609   6.65240792   7.06301913   7.06842526   7.09154507
   7.13670839   7.21260827   7.25586372   7.3314093    7.57027277
   7.90281091   8.40766971  13.24115472]
  beta  mo_energy =
[-20.35241563  -1.30372646  -0.68673072  -0.51112876  -0.44072619
   0.14134132   0.2021066    0.5586937    0.59926041   0.68785402
   0.81101822   0.82144215   0.82562033   0.85325469   0.9628883
   1.16263663   1.19161249   1.5551558    1.59413916   2.04880458
   2.07069499   2.11284092   2.18947122   2.27435599   2.60600677
   2.98320261   3.361787     3.49292414   3.55458617   3.64364912
   3.83808743   3.85426393   3.88991564   3.9434518    4.03658833
   4.09196197   4.22826578   4.34693002   4.46818864   4.58969222
   4.74441168   4.92630967   5.23838337   5.31852002   5.59905383
   6.13385557   6.65188234   7.06309273   7.0686799    7.09190603
   7.13618735   7.21282245   7.2560417    7.33156307   7.57087412
   7.90307441   8.40721221  13.24099701]
multiplicity <S^2> = 4.9693575e-05  2S+1 = 1.0000994
E1 = -122.79925604400134  Ecoul = 37.39511729640955
cycle= 2 E= -76.0501768376996  delta_E= -0.0273  |g|= 0.158  |ddm|= 0.213
    CPU time for cycle= 2      0.13 sec, wall time      0.02 sec
  alpha nocc = 5  HOMO = -0.513223137030358  LUMO = 0.140378181131167
  beta  nocc = 5  HOMO = -0.513132647883472  LUMO = 0.140327482130194
  alpha mo_energy =
[-20.5788482   -1.36465389  -0.73359886  -0.58534178  -0.51322314
   0.14037818   0.20132609   0.54750057   0.59882498   0.66345432
   0.78377069   0.80001155   0.80536452   0.85460227   0.95846119
   1.11558926   1.19710673   1.53705082   1.57918193   2.02550312
   2.02988231   2.06870011   2.16225381   2.22616731   2.59776889
   2.96184529   3.3597136    3.49690072   3.56854293   3.65783808
   3.80262816   3.87425848   3.88627631   3.95575369   4.01377977
   4.07456016   4.1988238    4.33858291   4.41834238   4.58604677
   4.69023896   4.89644306   5.19610252   5.25692002   5.53287876
   6.06694957   6.59886376   6.9452113    6.95335971   7.02308199
   7.04164988   7.14234435   7.15799563   7.2643475    7.46996016
   7.82283134   8.33324819  13.14801475]
  beta  mo_energy =
[-20.57875739  -1.36624335  -0.73429747  -0.58524204  -0.51313265
   0.14032748   0.20158385   0.5477725    0.59860928   0.66329809
   0.78395265   0.80011539   0.80534884   0.85461902   0.95845951
   1.11609891   1.19718282   1.53721962   1.5787821    2.025122
   2.02967312   2.068965     2.16187953   2.22589815   2.59764035
   2.96171042   3.3596874    3.49677191   3.56807681   3.65774168
   3.80240924   3.87419307   3.88589307   3.95568938   4.01377669
   4.07450419   4.19863894   4.33841063   4.41838719   4.58599786
   4.69010289   4.89622995   5.1957986    5.25686761   5.53281902
   6.06670244   6.59852941   6.94529312   6.95357633   7.0232211
   7.04142975   7.1424771    7.1579819    7.26438154   7.47030002
   7.82298922   8.33292386  13.1479091 ]
multiplicity <S^2> = 1.8230624e-05  2S+1 = 1.0000365
E1 = -123.46372911566186  Ecoul = 38.052188423185754
cycle= 3 E= -76.0575787825839  delta_E= -0.0074  |g|= 0.0205  |ddm|= 0.0621
    CPU time for cycle= 3      0.18 sec, wall time      0.02 sec
  alpha nocc = 5  HOMO = -0.504208455713619  LUMO = 0.144174470649351
  beta  nocc = 5  HOMO = -0.504146521600428  LUMO = 0.144125870469185
  alpha mo_energy =
[-20.54923379  -1.35245931  -0.7222234   -0.5775032   -0.50420846
   0.14417447   0.2046869    0.5531783    0.60626561   0.66674273
   0.78803667   0.80445045   0.81104967   0.86109377   0.96358102
   1.11840732   1.20211367   1.5455187    1.58909027   2.03071504
   2.03674197   2.07541884   2.17129197   2.23187355   2.60876879
   2.97237422   3.36973681   3.50686487   3.58142065   3.66864152
   3.81642552   3.8853331    3.89911837   3.96633262   4.02503438
   4.08612163   4.21150372   4.34828946   4.42740636   4.59773235
   4.70214986   4.90932494   5.21100527   5.26821745   5.54508361
   6.07884157   6.61295967   6.95929431   6.96883215   7.03383839
   7.05834799   7.15450997   7.17134513   7.27514346   7.48251098
   7.83406331   8.35185372  13.16659452]
  beta  mo_energy =
[-20.54920449  -1.35311597  -0.72237021  -0.57752283  -0.50414652
   0.14412587   0.20481062   0.55327249   0.60620999   0.66661272
   0.78811614   0.80451735   0.81106924   0.8611251    0.96360221
   1.11863842   1.20216412   1.5456067    1.58889656   2.03052576
   2.0366316    2.07553952   2.17115551   2.231716     2.60871178
   2.97231346   3.36975232   3.50682893   3.58123982   3.66862221
   3.81634698   3.88532176   3.89897229   3.96632287   4.02504761
   4.0861097    4.21140978   4.34822131   4.42742354   4.59772785
   4.70209386   4.90923633   5.21086297   5.26819231   5.54506217
   6.07872493   6.61280279   6.95930409   6.96894671   7.03390143
   7.05823426   7.1545771    7.17132225   7.27515098   7.48266881
   7.83412591   8.35169394  13.16654393]
multiplicity <S^2> = 4.3736207e-06  2S+1 = 1.0000087
E1 = -123.39903739386469  Ecoul = 37.98732306801881
cycle= 4 E= -76.0577524159537  delta_E= -0.000174  |g|= 0.00444  |ddm|= 0.0133
    CPU time for cycle= 4      0.19 sec, wall time      0.04 sec
  alpha nocc = 5  HOMO = -0.505149740759145  LUMO = 0.1442789865051
  beta  nocc = 5  HOMO = -0.505130902760803  LUMO = 0.144248485783648
  alpha mo_energy =
[-20.55095249  -1.35318046  -0.72213767  -0.57776957  -0.50514974
   0.14427899   0.20508449   0.55364213   0.60655286   0.66664678
   0.78754317   0.80483137   0.81132936   0.86146718   0.96383211
   1.11850972   1.20258098   1.54611027   1.58919345   2.0307431
   2.03668886   2.07558259   2.17136106   2.23160691   2.60971496
   2.97319954   3.37052906   3.50767407   3.58197492   3.66962451
   3.81650103   3.88669514   3.89995456   3.96765419   4.02586153
   4.08706619   4.21213072   4.34898596   4.42813055   4.59858647
   4.70195975   4.90987069   5.21095581   5.26837082   5.54490031
   6.07844024   6.61275983   6.95878571   6.96818269   7.03392543
   7.05757983   7.15460716   7.17110592   7.27522343   7.48245472
   7.83439973   8.3517042   13.16621544]
  beta  mo_energy =
[-20.55095141  -1.35336956  -0.72211143  -0.5778434   -0.5051309
   0.14424849   0.20512745   0.55368006   0.60655235   0.66657245
   0.78756694   0.80485672   0.8113582    0.86149098   0.96385411
   1.11857589   1.20260784   1.54614968   1.58912696   2.03068393
   2.03664285   2.0756138    2.17133239   2.23153596   2.60971476
   2.97318767   3.37054946   3.50767915   3.58194741   3.66963665
   3.81649356   3.88671052   3.89993485   3.96766678   4.02587699
   4.08707383   4.21209399   4.3489731    4.42813049   4.59859575
   4.70194706   4.90984892   5.21090836   5.26836486   5.54489671
   6.07839597   6.61270661   6.95876326   6.9682213    7.03394544
   7.05752436   7.15462863   7.17108578   7.27522166   7.48250259
   7.83441058   8.35164527  13.16620038]
multiplicity <S^2> = 6.5625882e-07  2S+1 = 1.0000013
E1 = -123.40464889454324  Ecoul = 37.992918215552244
cycle= 5 E= -76.0577687690988  delta_E= -1.64e-05  |g|= 0.000887  |ddm|= 0.00633
    CPU time for cycle= 5      0.25 sec, wall time      0.04 sec
  alpha nocc = 5  HOMO = -0.5053167156314  LUMO = 0.144242407504534
  beta  nocc = 5  HOMO = -0.505313807724123  LUMO = 0.144230152060831
  alpha mo_energy =
[-20.55098488  -1.353262    -0.72197756  -0.57782358  -0.50531672
   0.14424241   0.20514033   0.55361563   0.60647844   0.66660113
   0.78743219   0.80489173   0.81132689   0.86146205   0.96383131
   1.11855373   1.20256185   1.54615033   1.58915569   2.03069049
   2.03668401   2.07557795   2.1713284    2.23158122   2.60968517
   2.97320251   3.37050823   3.50768177   3.58192731   3.66961218
   3.81646317   3.88673089   3.89989262   3.96768186   4.0259034
   4.08711796   4.21215982   4.34899109   4.42814564   4.59860068
   4.70196958   4.90984891   5.21092928   5.26837797   5.54487914
   6.0784229    6.61275605   6.95882023   6.96814056   7.03390383
   7.05749496   7.15450107   7.1710861    7.27521282   7.48239466
   7.83437197   8.35163919  13.16618917]
  beta  mo_energy =
[-20.55098945  -1.35331586  -0.72195811  -0.57788804  -0.50531381
   0.14423015   0.20515237   0.55364188   0.60648692   0.66656249
   0.78743775   0.80489599   0.81134654   0.86147566   0.96384546
   1.11856561   1.20257501   1.54616618   1.58913472   2.03067709
   2.03666387   2.07558081   2.17131934   2.2315525    2.60969981
   2.97320536   3.37051899   3.50769056   3.58193547   3.66962499
   3.81646928   3.88674703   3.89989946   3.96769398   4.02591437
   4.08712541   4.21214578   4.34899149   4.42814093   4.59860668
   4.70196862   4.90984334   5.21091389   5.26837694   5.54487835
   6.07840382   6.6127382    6.95879794   6.96814758   7.03390808
   7.05746318   7.1545039    7.17107061   7.27520888   7.48240317
   7.83436815   8.35161602  13.16618556]
multiplicity <S^2> = 1.0631038e-07  2S+1 = 1.0000002
E1 = -123.40428955194417  Ecoul = 37.99255798176453
cycle= 6 E= -76.0577696602874  delta_E= -8.91e-07  |g|= 0.000167  |ddm|= 0.00133
    CPU time for cycle= 6      0.11 sec, wall time      0.02 sec
  alpha nocc = 5  HOMO = -0.505389259649032  LUMO = 0.144229951169655
  beta  nocc = 5  HOMO = -0.505390746551777  LUMO = 0.144225868657046
  alpha mo_energy =
[-20.55102501  -1.35330574  -0.72195559  -0.57788463  -0.50538926
   0.14422995   0.20515394   0.55361164   0.60646163   0.66657255
   0.78739402   0.80489962   0.81132468   0.8614579    0.96382768
   1.11854084   1.20256002   1.54615695   1.58914029   2.03067086
   2.03665299   2.07555316   2.17131014   2.23154411   2.60967299
   2.97318796   3.37049836   3.50767682   3.58192021   3.66961023
   3.81643708   3.88673532   3.8998771    3.96768048   4.02589719
   4.08711605   4.212143     4.34897824   4.42812277   4.59859967
   4.70194665   4.90983157   5.21090558   5.2683526    5.54485044
   6.07838822   6.61273021   6.95877887   6.96810142   7.03387278
   7.0574486    7.15446215   7.17104748   7.27518064   7.48235477
   7.83433448   8.35160186  13.16616133]
  beta  mo_energy =
[-20.55103054  -1.35333017  -0.72195317  -0.57792232  -0.50539075
   0.14422587   0.20515655   0.5536266    0.60647005   0.6665538
   0.78739469   0.80489722   0.81133505   0.86146589   0.96383577
   1.11854089   1.20256721   1.54616135   1.58913252   2.03066674
   2.03664402   2.07555126   2.1713042    2.23153219   2.60968326
   2.97319095   3.37050348   3.50768228   3.58192771   3.66961779
   3.81644114   3.88674524   3.89988266   3.96768805   4.02590331
   4.08711928   4.21213669   4.34897965   4.42811937   4.59860213
   4.70194678   4.90982788   5.2108991    5.26835146   5.54484882
   6.07837874   6.6127226    6.95876464   6.9680985    7.03387274
   7.0574294    7.15446011   7.17103746   7.27517732   7.48235303
   7.83432944   8.35158989  13.1661591 ]
multiplicity <S^2> = 2.0370605e-08  2S+1 = 1
E1 = -123.4043308306799  Ecoul = 37.99259922442309
cycle= 7 E= -76.0577696963646  delta_E= -3.61e-08  |g|= 4.6e-05  |ddm|= 0.000225
    CPU time for cycle= 7      0.14 sec, wall time      0.02 sec
  alpha nocc = 5  HOMO = -0.505389799175405  LUMO = 0.144228422720177
  beta  nocc = 5  HOMO = -0.505393256297556  LUMO = 0.144227511834199
  alpha mo_energy =
[-20.55101773  -1.35330796  -0.72194133  -0.57789257  -0.5053898
   0.14422842   0.20515734   0.5536157    0.60646359   0.66656602
   0.78739111   0.80490327   0.81132803   0.86146037   0.96383025
   1.11854178   1.20256334   1.5461612    1.58913913   2.03067079
   2.03665042   2.07555407   2.17131053   2.23154049   2.60967668
   2.97319027   3.37050111   3.50767953   3.58192349   3.66961428
   3.81643931   3.88673988   3.8998799    3.96768373   4.02590013
   4.08711981   4.21214325   4.34897953   4.42812368   4.59860319
   4.7019482    4.90983285   5.21090591   5.26835465   5.5448527
   6.07838792   6.61273052   6.95877922   6.96810582   7.03387521
   7.0574473    7.15446446   7.17104824   7.27518202   7.48235829
   7.83433619   8.35160124  13.16616453]
  beta  mo_energy =
[-20.55102236  -1.35332147  -0.72194672  -0.57790949  -0.50539326
   0.14422751   0.20515704   0.55362279   0.60646925   0.66655849
   0.78739011   0.80489988   0.81133262   0.86146462   0.9638344
   1.11854016   1.20256701   1.54616138   1.5891363    2.03066914
   2.03664721   2.07555216   2.17130712   2.23153611   2.60968152
   2.97319157   3.37050348   3.50768223   3.58192703   3.6696178
   3.81644062   3.88674457   3.89988249   3.96768759   4.02590271
   4.08712046   4.21214059   4.34898034   4.42812216   4.59860386
   4.70194791   4.90983023   5.21090293   5.26835351   5.54485086
   6.07838369   6.61272729   6.95877189   6.96810098   7.03387418
   7.05743719   7.154462     7.17104286   7.27517991   7.48235486
   7.83433285   8.35159511  13.16616261]
multiplicity <S^2> = 3.289288e-09  2S+1 = 1
E1 = -123.40432174535675  Ecoul = 37.99259013570845
cycle= 8 E= -76.0577696997561  delta_E= -3.39e-09  |g|= 1.7e-05  |ddm|= 7.49e-05
    CPU time for cycle= 8      0.13 sec, wall time      0.02 sec
  alpha nocc = 5  HOMO = -0.505388157197355  LUMO = 0.144228364358514
  beta  nocc = 5  HOMO = -0.505391087485823  LUMO = 0.144228394704825
  alpha mo_energy =
[-20.55101788  -1.35331137  -0.72194372  -0.57789818  -0.50538816
   0.14422836   0.20515731   0.55361918   0.60646572   0.66656422
   0.78739322   0.80490273   0.8113302    0.86146191   0.96383203
   1.11854242   1.20256464   1.54616188   1.5891385    2.030671
   2.03665027   2.07555468   2.17131026   2.2315401    2.60967896
   2.97319134   3.37050242   3.50768076   3.58192515   3.6696156
   3.81644111   3.88674125   3.89988146   3.96768505   4.02590135
   4.08712024   4.2121426    4.34898028   4.42812386   4.59860354
   4.70194927   4.90983281   5.21090581   5.2683554    5.54485358
   6.07838786   6.6127304    6.95877824   6.96810657   7.03387638
   7.05744565   7.15446541   7.17104792   7.2751827    7.48235921
   7.83433652   8.35160055  13.16616504]
  beta  mo_energy =
[-20.55102024  -1.3533167   -0.72194783  -0.57790271  -0.50539109
   0.14422839   0.20515663   0.55362122   0.60646823   0.66656243
   0.78739202   0.80490071   0.81133146   0.86146361   0.9638335
   1.11854158   1.20256593   1.54616122   1.58913782   2.0306705
   2.03664965   2.07555372   2.17130901   2.2315391    2.60968048
   2.97319169   3.37050324   3.50768169   3.58192621   3.66961669
   3.81644103   3.88674271   3.89988227   3.96768642   4.02590192
   4.08712003   4.21214191   4.34898056   4.4281235    4.59860356
   4.70194889   4.90983162   5.21090477   5.26835478   5.54485249
   6.07838657   6.61272945   6.95877557   6.96810341   7.0338756
   7.05744202   7.15446404   7.17104592   7.27518181   7.48235705
   7.83433517   8.35159835  13.16616399]
multiplicity <S^2> = 2.8617997e-10  2S+1 = 1
E1 = -123.4043192149123  Ecoul = 37.99258760470048
cycle= 9 E= -76.0577697003196  delta_E= -5.64e-10  |g|= 5.46e-06  |ddm|= 3.2e-05
    CPU time for cycle= 9      0.15 sec, wall time      0.02 sec
  alpha nocc = 5  HOMO = -0.505388930392069  LUMO = 0.14422821130272
  beta  nocc = 5  HOMO = -0.505391070388504  LUMO = 0.144228215751446
  alpha mo_energy =
[-20.55101973  -1.35331274  -0.72194472  -0.57789926  -0.50538893
   0.14422821   0.20515703   0.55361902   0.60646588   0.66656358
   0.78739264   0.80490195   0.81133011   0.86146198   0.963832
   1.1185418    1.20256467   1.54616131   1.58913802   2.03067048
   2.03664967   2.07555399   2.17130954   2.23153942   2.60967878
   2.97319093   3.37050218   3.50768058   3.58192497   3.6696155
   3.81644049   3.8867413    3.89988115   3.96768502   4.02590113
   4.08711982   4.21214202   4.34897997   4.42812326   4.59860319
   4.70194856   4.90983207   5.210905     5.26835461   5.54485261
   6.07838682   6.61272951   6.95877679   6.96810499   7.03387548
   7.05744404   7.15446437   7.17104668   7.27518179   7.48235792
   7.83433548   8.35159934  13.16616402]
  beta  mo_energy =
[-20.55102133  -1.35331639  -0.72194745  -0.57790239  -0.50539107
   0.14422822   0.20515659   0.55362047   0.60646756   0.66656233
   0.78739176   0.8049006    0.81133099   0.86146316   0.96383302
   1.11854128   1.20256555   1.5461609    1.58913752   2.03067016
   2.03664921   2.07555333   2.1713087    2.23153869   2.60967985
   2.97319118   3.37050274   3.50768123   3.58192573   3.66961626
   3.81644042   3.88674232   3.89988172   3.96768596   4.02590151
   4.08711971   4.21214155   4.34898017   4.42812301   4.59860321
   4.70194829   4.90983129   5.21090427   5.2683542    5.54485187
   6.07838591   6.61272884   6.95877491   6.96810283   7.03387494
   7.05744156   7.15446345   7.1710453    7.27518117   7.48235646
   7.83433458   8.35159785  13.1661633 ]
multiplicity <S^2> = 1.3696777e-10  2S+1 = 1
E1 = -123.40432320320512  Ecoul = 37.99259159296199
Extra cycle  E= -76.0577697003509  delta_E= -3.13e-11  |g|= 3.63e-06  |ddm|= 4.27e-06
    CPU time for scf_cycle      2.17 sec, wall time      0.33 sec
    CPU time for SCF      2.19 sec, wall time      0.33 sec
converged SCF energy = -76.0577697003509  <S^2> = 1.3696777e-10  2S+1 = 1
    CPU time for UHF partial hessian      4.76 sec, wall time      3.17 sec
    CPU time for UHF hessian      7.36 sec, wall time      4.96 sec
E1 = -123.40432320320512  Ecoul = 37.99259159296199
E1 = -123.40432320320512  Ecoul = 37.99259159296199
